#+TITLE: Emacs Configuration
#+AUTHOR: Murray Logan

Boilerplate for a ~/.emacs.d/config.org emacs configuration using
"Sane Defaults".

Steps to making this file yours:

1) Need to alter the org-directory to the location containing org files..

1) Change all instances of "Your Name Here" to your name.
2) Change all instances of "your@email.here" to your email address.
3) Create ~/.emacs.d/custom.el even if it's empty.
   Emacs will now write your (interactive) customizations to that
   file.
4) Change the Sane Defaults if you need to.
   For example if you read and write Chinese and so prefer to default
   to utf-16.
5) Teach yourself what goes into your backup directories
   ~/.emacs.d/backups
   ~/.emacs.d/auto-save-list
   So you'll know where to look for older versions of files that
   you've edited.
6) Delete these instructions and replace them with a personalized
   introduction.

* Personal Information

#+begin_src emacs-lisp
(setq user-full-name "Murray Logan"
      user-mail-address "i.obesulus@gmail.com")
#+end_src

* Customize settings

Set up the customize file to its own separate file, instead of saving
customize settings in [[file:init.el][init.el]].

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+end_src

* Sane defaults

Let's start with some sane defaults, shall we?

Sources for this section include [[https://github.com/magnars/.emacs.d/blob/master/settings/sane-defaults.el][Magnars Sveen]] and [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]].

#+begin_src emacs-lisp
;; These functions are useful. Activate them.
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'dired-find-alternate-file 'disabled nil)

;; Answering just 'y' or 'n' will do
(defalias 'yes-or-no-p 'y-or-n-p)

;; Keep all backup and auto-save files in one directory
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

;; UTF-8 please
(setq locale-coding-system 'utf-8) ; pretty
(set-terminal-coding-system 'utf-8) ; pretty
(set-keyboard-coding-system 'utf-8) ; pretty
(set-selection-coding-system 'utf-8) ; please
(prefer-coding-system 'utf-8) ; with sugar on top
(setq-default indent-tabs-mode nil)

;; Turn off the blinking cursor
(blink-cursor-mode -1)

(setq-default indent-tabs-mode nil)
(setq-default indicate-empty-lines t)

;; Don't count two spaces after a period as the end of a sentence.
;; Just one space is needed.
(setq sentence-end-double-space nil)

;; delete the region when typing, just like as we expect nowadays.
(delete-selection-mode t)

(show-paren-mode t)

(column-number-mode t)

(global-visual-line-mode)
(diminish 'visual-line-mode)

(setq uniquify-buffer-name-style 'forward)

;; -i gets alias definitions from .bash_profile
(setq shell-command-switch "-ic")

;; Don't beep at me
(setq visible-bell t)
#+end_src

The following function for ~occur-dwim~ is taken from [[https://github.com/abo-abo][Oleh Krehel]] from
[[http://oremacs.com/2015/01/26/occur-dwim/][his blog post at (or emacs]]. It takes the current region or the symbol
at point as the default value for occur.

#+begin_src emacs-lisp
(defun occur-dwim ()
  "Call `occur' with a sane default."
  (interactive)
  (push (if (region-active-p)
            (buffer-substring-no-properties
             (region-beginning)
             (region-end))
          (thing-at-point 'symbol))
        regexp-history)
  (call-interactively 'occur))

(bind-key "M-s o" 'occur-dwim)
#+end_src

* General appearence
#+begin_src emacs-lisp
(when window-system
  (menu-bar-mode 1)
  (tool-bar-mode -1)
)
(setq inhibit-startup-message t)
(setq initial-scratch-message "")
#+end_src
* Customized menu
** Functions
   - Load various files
#+begin_src emacs-lisp
(defun ml-load-files-notes ()
  "Load notes.org"
  (interactive)
  (find-file "~/org/notes.org")
  )
(global-set-key (kbd "C-c f n") 'ml-load-files-notes)
(defun ml-load-files-AIMS ()
  "Load AIMS.org"
  (interactive)
  (find-file "~/org/AIMS.org")
  )
(global-set-key (kbd "C-c f a") 'ml-load-files-AIMS)
(defun ml-load-files-references ()
  "Load references.org"
  (interactive)
  (find-file "~/org/references.org")
  )
(global-set-key (kbd "C-c f r") 'ml-load-files-references)
(defun ml-load-files-bib ()
  "Load References.bib"
  (interactive)
  (find-file "~/Dropbox/Work/Resources/References/References.bib")
  )
(global-set-key (kbd "C-c f b") 'ml-load-files-bib)
(defun ml-load-files-init ()
  "Load init.el"
  (interactive)
  (find-file "~/.emacs.d/init.el")
  )
(global-set-key (kbd "C-c f i") 'ml-load-files-init)
#+end_src
   - Text editing
     Strip out trailing whitespace from all lines in a buffer.
#+begin_src emacs-lisp
(defun strip-trailing-space ()
  "Strip out trailing whitespace from all lines in buffer."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward "[ \t]+$" nil t)
      (replace-match "" t t))))
(define-key global-map [(control ?{) ?t] 'strip-trailing-space) ; Bind to C-{ t
#+end_src
   Goto the longest line
   Sometimes for code is nice to find lines that are pushed out too far.
   This function moves point to the end of the longest line.  Also handy
   for lining up columns of text when used in a narrowed buffer.
#+begin_src emacs-lisp
(defun goto-longest-line ()
  "Finds the longest line and puts the point there."
  (interactive)
  (let ((width 0)
        (pos 0))
    (goto-char (point-min))
    (while (= (forward-line 1) 0)
      (end-of-line)
      (let ((curwid (current-column)))
        (unless (<= curwid width)
          (setq width curwid)
          (setq pos (point)))))
    (goto-char pos)))
#+end_src
   Display a series of useful emacs key bindings.
#+begin_src emacs-lisp
   (defun ml-show-mkeys(x)
	 "Display a series of useful emacs key bindings."
	 (interactive "sChoice (q=quick, p=popup): ")
	 (pos-tip-show
	  (with-temp-buffer
		(insert-file-contents "~/org/notes.org")
		(if (equal x "q") (progn (search-forward "Quick commands" nil nil 1) (setq p1 (point))))
		(if (equal x "p") (progn (search-forward "POPUP shortcuts" nil nil 1) (setq p1 (point))))
		(search-forward "*" nil nil 1) (setq p2 (point))
		(narrow-to-region p1 p2)
		(buffer-string)
		)
	  nil nil nil 0)
	 )
(global-set-key (kbd "C-'") 'ml-show-mkeys)
#+end_src
   Goto matching parenthases
   If point is sitting on a parenthetic character, jump to its match.
   This matches the standard parenthesis highlighting for determining which
   one it is sitting on.
#+begin_src emacs-lisp
(defun goto-matching-paren ()
  "If point is sitting on a parenthetic character, jump to its match."
  (interactive)
  (cond ((looking-at "\\s\(") (forward-list 1))
        ((progn
           (backward-char 1)
           (looking-at "\\s\)")) (forward-char 1) (backward-list 1))))
 (define-key global-map [(control ?{) ?p] 'goto-matching-paren) ; Bind to C-i p
#+end_src
*** Rmarkdown/xelatex templates
#+begin_src emacs-lisp
(defun R-xelatex ()
  ;;  (interactive "sfilename:?")
  (interactive)
  (setq var (split-string (read-from-minibuffer "Enter filename: "nil nil nil nil nil nil) " "))
  (setq name (car var))
  (shell-command "mkdir figures")
  (shell-command "mkdir cache")
  (shell-command "mkdir data")
  (find-file "Makefile")
  (xelatex-rnw-makefile name)
  (save-buffer)
  (kill-buffer "Makefile")
  (find-file (concat name ".rnw"))
  (xelatex-rnw-skeleton)
  (save-buffer)
  )

(define-skeleton xelatex-rnw-makefile 
  "Inserts a basic noweb xelatex makefile skeleton into a buffer."
  ;;"filename: "
  ;;(find-file "Makefile")
  ".SUFFIXES: .rnw .tex .pdf .dvi .ps\n"
  "RNWFILES = $(wildcard *.rnw)\n"
  "TEX = $(patsubst %.rnw,%.tex,$(RNWFILES)) #$(wildcard *.tex)\n"
  "TARGET = " name "\n"
  "LATEX_ARGS=--interaction=nonstopmode --output-driv=\"xdvipdfmx -vv -V 4\"\n"
  ;;"LATEX_ARGS=--interaction=batchmode --output-driv=\"xdvipdfmx -vv -V 4\"\n"
  ;;  "LATEX_ARGS=\"-interaction=nonstopmode\"\n"
  "LATEX=xelatex\n"
  "RERUNBIB = \"No file.*\\\ .bbl|Citation.*undefined\"\n"
  "RERUNINDEX = \"No file.*\\\ .ind\"\n\n"

  "PDFS=$(wildcard figures/*.pdf)\n"
  "JPGS=$(patsubst %.pdf, %.jpg, $(PDFS))\n"
  "EPSS=$(patsubst %.pdf, %.eps, $(PDFS))\n"
  "CONVERT = convert -density 300 -resize 33% -background white -flatten\n\n"

  "MASTER = " str ".pdf\n" 
  "DEPENDS = $(TARGET).tex\n\n"
  "$(MASTER): $(DEPENDS)\n\n"
  
  "%.tex: %.rnw\n"
  "		echo \"library(pgfSweave); setCacheDir('cache'); pgfSweave(\\\"$<\\\")\" | R --no-save --no-restore\n\n"
  "		echo \"Stangle(\\\"$<\\\")\" | R --no-save --no-restore\n\n"
;;  "       echo \"library(pgfSweave); setCacheDir('cache'); pgfSweave(\\\"$<\\\", graphics.only=T,compile.tex=F,pdf=F)\" | R --no-save --no-restore\n\n"
;;  "		echo \"library(cacheSweave); library(highlight); setCacheDir('cache'); Sweave(\\\"$<\\\", driver = HighlightWeaveLatex(boxes=T,bg=rgb(255,255,204,max=255)))\" | R --no-save --no-restore \n"
;;  "		  echo \"library(cacheSweave); setCacheDir('cache'); Sweave(\\\"$<\\\", driver = cacheSweaveDriver)\" | R --no-save --no-restore\n\n"
;;  "		echo \"Stangle(\\\"$<\\\")\" | R --no-save --no-restore\n\n"
;;  "		echo \"sed s/,.size=scriptsize//g \\\"$<\\\" > junk\" \n"
;;  "		echo \"Stangle(\\\"junk\\\",output=\\\"$(TARGET).R\\\")\" | R --no-save --no-restore\n\n"
;;  "		echo \"rm(junk)\" \n"
 
  "$(TARGET).pdf: $(TEX)\n"
  "	$(LATEX) $(LATEX_ARGS) $(TARGET).tex;\n"
  "	while \\\ egrep -c $(RERUNBIB) $(TARGET).log; \\\ \n"
  "	do \\\ \n"
  "		bibtex $(TARGET); \\\ \n"
  "		$(LATEX) $(LATEX_ARGS) $(TARGET).tex; \\\ \n"
  "	done\n"
  "	while \\\ grep -q \"Rerun to get cross-references right.\" \\\ \n"
  "	$(TARGET).log; \\\ \n"
  "	do \\\ \n"
  "		$(LATEX) $(LATEX_ARGS) $(TARGET).tex; \\\ \n"
  "	done\n"
  "	$(LATEX) $(LATEX_ARGS) $(TARGET).tex;\n\n"
  
  "figs: $(JPGS) $(EPSS)\n\n"

  "%.jpg: %.pdf\n"
  "		@echo ** Building jpg images from pdf versions**\n"
  "		$(CONVERT) $< $@\n\n"

  "%.eps: %.pdf\n"
  "		pdf2ps -dLanguageLevel=3 $< $@\n\n"

  "figures::\n" 
  "		for image_file in $(wildcard figures/*.pdf); \\\ \n"
  "		do \\\ \n"
  "				convert -density 300 -quality 100 $${image_file} $${image_file}.jpg; \\\ \n"
  "		done;\n\n"

  "		for image_file in $(wildcard figures/*.pdf); \\\ \n"
  "		do \\\ \n"
  "				convert -density 300 -quality 100 $${image_file} $${image_file}.tiff; \\\ \n"
  "		done;\n\n"

  "		for image_file in $(wildcard figures/*.pdf); \\\ \n"
  "		do \\\ \n"
  "				pdftops -eps -level3 $${image_file}; \\\ \n"
  "		done;\n\n"

  "zip:\n"
  "		zip $(TARGET).zip $(TARGET).pdf *.R figures/*.pdf figures/*.jpg figures/*.eps \n"

  "clean:\n"
  "	rm *.toc *.aux *.pdf *.ps *.eps *.log *.lof *.bib *.bbl *.blg *.dvi *.tex *.map\n"
  
  )

;;-- xelatex template ########################################################-------------------------------------------------------------------------------------
(define-skeleton xelatex-rnw-skeleton
  "Inserts a basic LaTeX Noweb skeleton into the current buffer."
  "Document title: "
  "\\title{" str "}\n"
  "\\documentclass[a4paper]{article}\n"
  "\\usepackage[T1]{fontenc}        %for specifying any fonts\n"
  "\\usepackage{calligra}\n"
  "\\usepackage{rotating}           %for sideways tables\n"
  "\\usepackage{marvosym}\n"
  "\\usepackage{listings}		    %provides lstset for formating inserted computer code\n"
  "\\usepackage{tabularx}           %for tables\n"
  "\\usepackage{color,graphicx}\n"
  "\\usepackage{tikz}\n"
  "\\usetikzlibrary{backgrounds}\n"
  "\\usetikzlibrary{shadows}\n"
  "\\usepackage{wrapfig}\n"
  "\\usepackage[lmargin=1.75cm,rmargin=1.5cm, tmargin=1.5cm, a4paper]{geometry}\n"
  "%-----Define Provision for bibliography-----------\n"
  "\\usepackage{natbib}\n"
  "\\usepackage{bibentry}\n"
  "%-------------------------------------------------\n"
  "\\usepackage{bbding}\n"
  "%---Define some colors--------------------------\n"
  "\\definecolor{backgroundColor}{HTML}{CC3300}\n"
  "\\definecolor{linkcolour}{HTML}{393939} %{FF0080}	%light purple link for the email\n"
  "\\definecolor{shade}{HTML}{D4D7FE}		%light blue shade\n"
  "\\definecolor{text1}{HTML}{2b2b2b}		%text is almost black\n"
  "\\definecolor{headings}{HTML}{0099e3} 	%light blue\n"
  "\\definecolor{lightgray}{gray}{0.9} 		%light gray\n"
  "\\definecolor{rinput}{HTML}{FF0000}     %dark blue\n"
  "\\definecolor{routput}{HTML}{033197}     %dark blue\n"
  "\\definecolor{rbackground}{HTML}{FFFFCC}\n"
  "%-------------------------------------------------\n"
  "\\usepackage{hyperref}\n"
  "\\hypersetup{colorlinks,breaklinks,urlcolor=linkcolour,linkcolor=linkcolour, citecolor=routput}\n"
  "\\renewcommand*\\sfdefault{lmssq}\n"
  "%-Redefine the section title formats--------------\n"
  "\\usepackage{titlesec}\n"
  "\\titleformat{\\section}{\\Large\\sf\\bfseries\\raggedright\\color{headings}\\thesection. }{}{0em}{}[\\titlerule]\n"
  "\\titlespacing{\\section}{0pt}{3pt}{3pt}\n"
  "\\titleformat{\\subsection}{\\large\\sf\\bfseries\\itshape\\raggedright\\color{headings}\\thesubsection. }{}{0em}{}\n"
  "\\titlespacing{\\subsection}{0pt}{3pt}{3pt}\n"
  "\\titleformat{\\subsubsection}{\\normalsize\\sf\\bfseries\\itshape\\raggedright\\color{headings}\\thesubsubsection. }{}{0em}{}\n"
  "\\titlespacing{\\subsubsection}{0pt}{3pt}{3pt}\n"
  "%-------------------------------------------------\n"
  "%---Define a new list style-----------------------\n"
  "\\newenvironment{my_itemize}\n"
  "\{\\begin{list}{\\labelitemi}{\\leftmargin=1em}\n"
  "\}\n"
  "\{\\end{list}}\n"
  "%-------------------------------------------------\n"
  "\\usepackage{eso-pic}\n"
  "%--Put a silhouette at the bottom of the page-----\n"
  "\\newcommand\\BackgroundPic{\n"
  "\\put(130,-335){\n"
  "\\parbox[b][\\paperheight]{\\paperwidth}{%\n"
  "\\vfill\n"
  "\\centering\n"
  "\\includegraphics{/home/murray/Work/Resume/Murray/Biostatistician/seal_silhouette.jpg}%\n"
  "\\vfill\n"
  "\}}}\n"
  "%-------------------------------------------------\n"
  "%--Put a blue bar on the left hand side of the page---\n"
  "\\newcommand\\SidePic{\n"
  "\\put(-30,\\pageheight){\n"
  "\\includegraphics[width=23mm, height=31cm]{/home/murray/Work/Resume/blueSide.png}\n"
  "\\hspace{-2mm}{\\color{gray}\\rule{.5mm}{300mm}}{\\color{black}\\rule{.25mm}{300mm}}\n"
  "\}}\n"
  "%-------------------------------------------------\n"
  "%--Place   DRAFT ONLY  on each page---------------\n"
  "\\usepackage{fontspec}\n"
  "\\newcommand\\DraftWord{\n"
  "\\AtTextCenter{%\n"
  "\\makebox(0,0)[c]{\\resizebox{\\textwidth}{!}{%\n"
  "\\rotatebox{45}{\\textsf{\\textbf{\\color{lightgray}{\\fontspec[ExternalLocation=/home/murray/.fonts/]{angelina.TTF}\\fontsize{80pt}{0pt}\\selectfont Draft Only}}}}\n"
  "\}}\n"
  "\}\n"
  "\}\n"
  "%-------------------------------------------------\n"
  "\\pretolerance=2000\n"
  "\\tolerance=2000\n"
  "%\\usepackage[noae]{/usr/local/lib/R/share/texmf/Sweave}\n"
  "\\usepackage[noae]{Sweave}\n"
  "%--Alter the default format of the R code/output--\n"
  "\\DefineVerbatimEnvironment{Sinput}{Verbatim}{fontsize=\\scriptsize,fontshape=sl,formatcom={\\color{rinput}}}\n"
  "\\DefineVerbatimEnvironment{Soutput}{Verbatim}{\\vspace{-2em},fontsize=\\scriptsize,formatcom={\\color{routput}}}\n" 
  "\\DefineVerbatimEnvironment{Scode}{Verbatim}{fontshape=sl,formatcom={\\color{headings}}}\n" 
  "\\fvset{listparameters={\\setlength{\\topsep}{1em}}}\n"
  "\\renewenvironment{Houtput}{%\n"
  " \\begin{scriptsize}\n"
  "    \\color{routput}\n"
  "    \\par\n"
  "    \\tikzexternaldisable\n"
  "    \\begin{tikzpicture}\n"
  "      \\node[fill=rbackground,rectangle,minimum width=0.9\\textwidth] (m)\n"
  "      \\bgroup\\begin{minipage}{0.85\\textwidth}%\n"
  "}\n"
  "{%\n"
  "  \\end{minipage}\\egroup;\n"
  "  \\draw[dashed] (m.south west) rectangle (m.north east);\n"
  "  \\end{tikzpicture}\n"
  "  \\end{scriptsize}\n"
  "\\\\ \n" 
  "}\n"

  "\\definecolor{highlightBg}{rgb}{1,1,0.8}\n"
  "\\definecolor{highlightBorder}{rgb}{0,0,0}\n"

  "\\renewenvironment{Hchunk}{% \n"
  " \\color{routput}\n"
  " \\par\n"
  " \\begin{tikzpicture}\n"
  "  \\node[fill=rbackground,rectangle,minimum width=0.9\\textwidth] (m)\n"
  "  \\bgroup\\begin{minipage}{0.85\\textwidth}%\n"
  "}{%\n"
  "  \\end{minipage}\\egroup;\n"
  "  \\draw[dashed] (m.south west) rectangle (m.north east);\n"
  "  \\end{tikzpicture}\\\\ \n" 
  "}\n"

  "%\\newenvironment{elaboration}{%\n"
  "%  \\par\n"
  "%  \\begin{tikzpicture}\n"
  "%  \\node[fill=rbackground,rectangle,minimum width=0.9\textwidth] (m)\n"
  "%  \\bgroup\\begin{minipage}{0.85\\textwidth}%\n"
  "% }{%\n"
  "%  \\end{minipage}\\egroup;\n"
  "%  \\draw[dashed] (m.south west) rectangle (m.north east);\n"
  "%  \\end{tikzpicture}\\\\ \n"
  "% }\n"

  "%\\makeatletter\n"
  "%\\renewenvironment{Schunk}{\\begin{elaboration}}{\\end{elaboration}}\n"
  "%\\makeatother\n"

  "%\\renewenvironment{Schunk}{\\vspace{\\topsep}}{\\vspace{\\topsep}}\n"
  "%-------------------------------------------------\n"
  "%--Change the format of the captions--------------\n"
  "% Different font in captions\n"
  "\\newcommand{\\captionfonts}{\\small\\sf}\n"
  "\\makeatletter  % Allow the use of @ in command names\n"
  "\\long\\def\\@makecaption#1#2{%\n"
  "\\vskip\\abovecaptionskip\n"
  "\\sbox\\@tempboxa{{\\captionfonts #1: \\em#2}}%\n"
  "\\ifdim \\wd\\@tempboxa >\\hsize\n"
  "{\\captionfonts #1: \\em#2\\par}\n"
  "\\else\n"
  "\\hbox to\\hsize{\\hfil\\box\\@tempboxa\\hfil}%\n"
  "\\fi\n"
  "\\vskip\\belowcaptionskip}\n"
  "\\makeatother   % Cancel the effect of \\makeatletter\n"
  "%-------------------------------------------------\n"
  "%--Change the page formatting---------------------\n"
  "% Change the format of the page numbers\n"
  "\\usepackage{fancyhdr}\n"
  "\\pagestyle{fancy}\n"
  "\\fancyhf{} % clear all header and footer fields\n"
  "\\fancyhead[RE,LO]{\\hfill\\bfseries\\sf \\thepage}\n"
  "\\fancyfoot[RE,LO]{\\hfill\\bfseries\\sf \\thepage}\n"
  "\\renewcommand{\\headrulewidth}{0pt}\n"
  "%-------------------------------------------------\n"
  "%--Change the name used for the table of contents-\n"
  "\\renewcommand{\\contentsname}{Table of contents}\n"
  "%-------------------------------------------------\n"

  "\\setlength\\parindent{0pt}\n"
  "\\setmonofont[Scale=MatchLowercase, ExternalLocation=\\string~/Dropbox/Config/Fonts/]{DejaVuSansMono.ttf}\n"
  "%\\setmonofont[Scale=MatchLowercase]{DejaVu Sans Mono}\n"
  "\\renewcommand{\\hlcomment}[1]{\\textcolor[HTML]{3C802C}{#1}}%\n"
  "\\renewcommand{\\hlstring}[1]{\\textcolor[HTML]{ED7722}{#1}}%\n"
  "\\renewcommand{\\hlfunctioncall}[1]{\\textcolor[HTML]{053369}{#1}}%\n"
  "\\renewcommand{\\hlnumber}[1]{\\textcolor[HTML]{0F20F6}{#1}}%\n"
  "\\renewcommand{\\hlkeyword}[1]{\\textcolor[HTML]{AA1F63}{\\textbf{#1}}}%\n"
  "\\renewcommand{\\hlargument}[1]{\\textcolor[HTML]{053369}{#1}}%\n"

  "\\setbox\\hlnormalsizeboxopenbrace=\\hbox{\\begin{scriptsize}\\verb.{.\\end{scriptsize}}%\n"
  "\\setbox\\hlnormalsizeboxclosebrace=\\hbox{\\begin{scriptsize}\\verb.}.\\end{scriptsize}}%\n"
  "\\setbox\\hlnormalsizeboxlessthan=\\hbox{\\begin{scriptsize}\\verb.<.\\end{scriptsize}}%\n"
  "\\setbox\\hlnormalsizeboxdollar=\\hbox{\\begin{scriptsize}\\verb.$.\\end{scriptsize}}%\n"
  "\\setbox\\hlnormalsizeboxunderscore=\\hbox{\\begin{scriptsize}\\verb._.\\end{scriptsize}}%\n"
  "\\setbox\\hlnormalsizeboxand=\\hbox{\\begin{scriptsize}\\verb.&.\\end{scriptsize}}%\n"
  "\\setbox\\hlnormalsizeboxhash=\\hbox{\\begin{scriptsize}\\verb.#.\\end{scriptsize}}%\n"
  "\\setbox\\hlnormalsizeboxat=\\hbox{\\begin{scriptsize}\\verb.@.\\end{scriptsize}}%\n"
  "\\setbox\\hlnormalsizeboxbackslash=\\hbox{\\begin{scriptsize}\\verb.\\.\\end{scriptsize}}%\n"
  "\\setbox\\hlnormalsizeboxgreaterthan=\\hbox{\\begin{scriptsize}\\verb.>.\\end{scriptsize}}%\n"
  "\\setbox\\hlnormalsizeboxpercent=\\hbox{\\begin{scriptsize}\\verb.%.\\end{scriptsize}}%\n"
  "\\setbox\\hlnormalsizeboxhat=\\hbox{\\begin{scriptsize}\\verb.^.\\end{scriptsize}}%\n"
  "\\setbox\\hlnormalsizeboxsinglequote=\\hbox{\\begin{scriptsize}\\verb.'.\\end{scriptsize}}%\n"
  "\\setbox\\hlnormalsizeboxbacktick=\\hbox{\\begin{scriptsize}\\verb.`.\\end{scriptsize}}%\n"
  "\\setbox\\hlnormalsizeboxhat=\\hbox{\\begin{scriptsize}\\verb.^.\\end{scriptsize}}%\n"

  "\\begin{document}\n"
  "\\SweaveOpts{prefix.string=figures/fig,keep.source=FALSE}\n"
  "\\sf\n"
  "\\AddToShipoutPicture{\\BackgroundPic}\n"
  "\\AddToShipoutPicture{\\SidePic}\n"
  "\\AddToShipoutPicture{\\DraftWord}\n"
  "%<<Setcache - THIS CODE SHOULD BE IGNORED, echo=F>>=\n"
  "%# The following step requires the cacheSweave package\n"
  "%setCacheDir(\"cache\")\n"
  "%reSQL<-TRUE\n"
  "%@\n\n" 

  "\\lstset{basicstyle=\\small\\ttfamily,columns=fixed,numbers=left,numberstyle=\\tiny,xleftmargin=3ex,xrightmargin=3ex,frame=lines,float=htb!}\n"
  "\n" _ "\n\n"
  "<<Rwidth, echo=FALSE, results=\"hide\">>=\n"
  "options(width=110)\n"
  "@\n\n"
  "\\noindent\\begin{minipage}[t]{\\linewidth}{%centering\n"
  "{\\noindent\\sffamily\\bfseries\\Huge " str "\n"
  "}\\\\[1em]\n"
  "\\large{Murray Logan}\\\\ \n"
  "\\normalsize\\textit{\\today}\n"
  "\\end{minipage}\\\\ \n" 

  "\\rule{\\linewidth}{2pt}\\\\[2pt]\n"
  
  "\\titleformat{\\section}{\\Large\\sf\\bfseries\\raggedright\\color{headings}}{}{0em}{}[\\titlerule]\n"
  "\\noindent\n"
  "{\\tikzexternaldisable\n"
  "\\begin{tikzpicture}\n"
  "\\node [fill=shade,rounded corners=5pt]\n"
  "{\n"
  "\\begin{minipage}[t]{\\textwidth}\n"  
  "\\tableofcontents\n"
  "\\end{minipage}\n"
  "};\n"
  "\\end{tikzpicture}\n"
  "}\n"
  "\\titleformat{\\section}{\\Large\\sf\\bfseries\\raggedright\\color{headings}\\thesection. }{}{0em}{}[\\titlerule]\n"
  "\\section{Data importation and preparation}\n"
  "\\subsection{Read in data}\n"
  "<<ReadData>>=\n"
  "data <- read.table('data.csv', header=T, sep=',', strip.white=T)\n"
  "@\n"
  "\\subsection{Prepare data}\n"
  "\\noindent\n"
  "{\\tikzexternaldisable\n"
  "\\begin{tikzpicture}\n"
  "\\node [fill=shade,rounded corners=5pt]\n"
  "{\n"
  "\\begin{minipage}[t]{\\textwidth}\n"  
  "\\textbf{Conclusions}.\n"
  "\\end{minipage}\n"
  "};\n"
  "\\end{tikzpicture}}\n"

  "\\addcontentsline{toc}{section}{References and additional reading}\\titleformat{\\section}{\\Large\\sf\\bfseries\\raggedright\\color{headings}}{}{0em}{}[\\titlerule]\n"
  "\\bibliographystyle{/home/murray/Work/References/ecology}\n"
  "\\bibliography{/home/murray/Work/References/References}\n" 
  "~\\\\[2em]"
  "\\addcontentsline{toc}{section}{Appendices}\n"
  "\\appendix{\\Large\\sf\\bfseries\\raggedright\\color{headings} Appendicies \\\\[0.3em]\\titlerule\\\\[0.1em]}\n"
  "\\titleformat{\\subsection}{\\large\\sf\\bfseries\\itshape\\raggedright\\color{headings}\\Alph{subsection}. }{}{0em}{}\n"
  "\\renewcommand{\\thesubsection}    {\\Alph{subsection}}\n"
  "\\subsection{Production notes}\n"
  "\\noindent This document was produced using \\LaTeX~ and \\Sexpr{print(version$version.string)} via Sweave, on a system:$\\Sexpr{print(version$platform)}$.\n"
  "The complete annotated R syntax is in the accompanying " name ".R file.\n"

  "%<<CreateRFile - THIS CODE SHOULD BE IGNORED, echo=FALSE>>=\n"
  "%Stangle('"name ".rnw')\n"
  "%@\n" 
  "\\end{document}\n")
;;------------END OF R-xelatex-----------------------------------------------------------------------------------------------------------------------------------



;; ----Start of elsarticle-R---------------------------------------------------
(defun elsarticle-R()
  ;;  (interactive "sfilename:?")
  (interactive)
  (setq var (split-string (read-from-minibuffer "Enter filename: "nil nil nil nil nil nil) " "))
  (setq name (car var))
  (setq author (read-string "Document author: " nil nil nil nil))
  (shell-command "mkdir figures")
  (shell-command "mkdir cache")
  (shell-command "mkdir data")
  (shell-command "mkdir scripts")
  (shell-command "mkdir fonts")
  (find-file "Makefile")
  (elsarticle-R-makefile name)
  (save-buffer)
  (kill-buffer "Makefile")
  (find-file (concat name ".Rmd"))
  (elsarticle-R-skeleton)
  (save-buffer)
  )

;;--------------------------------------------------------------------------------------------


;; ----Start of small-markdown-knitr-pandoc---------------------------------------------------
(defun small-markdown-knitr-pandoc ()
  ;;  (interactive "sfilename:?")
  (interactive)
  (setq var (split-string (read-from-minibuffer "Enter filename: "nil nil nil nil nil nil) " "))
  (setq name (car var))
  (setq author (read-string "Document author: " nil nil nil nil))
  (shell-command "mkdir figures")
  (shell-command "mkdir cache")
  (shell-command "mkdir data")
  (shell-command "mkdir scripts")
  (shell-command "mkdir fonts")
  (find-file "Makefile")
  (markdown-knitr-pandoc-makefile name)
  (save-buffer)
  (kill-buffer "Makefile")
  (find-file (concat name ".Rmd"))
  (markdown-knitr-pandoc-skeleton)
  (save-buffer)
  )

;;--------------------------------------------------------------------------------------------

;; ----Start of large-markdown-knitr-pandoc---------------------------------------------------
(defun large-markdown-knitr-pandoc ()
  ;;  (interactive "sfilename:?")
  (interactive)
  (setq var (split-string (read-from-minibuffer "Enter filename: "nil nil nil nil nil nil) " "))
  (setq name (car var))
  (setq author (read-string "Document author: " nil nil nil nil))
  (shell-command "mkdir figures")
  (shell-command "mkdir cache")
  (shell-command "mkdir data")
  (shell-command "mkdir scripts")
  (shell-command "mkdir fonts")
  (find-file "Makefile")
  (markdown-knitr-pandoc-makefile name)
  (save-buffer)
  (kill-buffer "Makefile")
;;  (find-file (concat name ".Rmd"))
;;  (markdown-knitr-pandoc-skeleton)
;;  (save-buffer)
  (find-file (concat "01-" name "-import.Rmd"))
  (markdown-knitr-pandoc-skeleton-01)
  (save-buffer)
  (find-file "helperFunctions.R")
  (markdown-knitr-pandoc-skeleton-helperFunctions)
  (save-buffer)
  (find-file (concat "02-" name "-processing.Rmd"))
  (markdown-knitr-pandoc-skeleton-02)
  (save-buffer)
  (find-file (concat "05-" name "-analysis.Rmd"))
  (markdown-knitr-pandoc-skeleton-05)
  (save-buffer)
  (save-buffer)
  (find-file (concat "07-" name "-summaries.Rmd"))
  (markdown-knitr-pandoc-skeleton-07)
  (save-buffer)
  (find-file (concat "09-" name "-appendix.Rmd"))
  (markdown-knitr-pandoc-skeleton-09)
  (save-buffer)
  (find-file "templates")
  (markdown-knitr-templates)
  (save-buffer)
  )


(define-skeleton elsarticle-R-makefile 
  "Inserts a basic elsarticle with R mardown and makefile skeleton into a buffer."
  ;;"filename: "
  ;;(find-file "Makefile")
  "\n"
  "## Notes\n"
  "##  Must be able to process with latex and pdflatex\n\n"
  "## Usage\n"
  "##  make -i\n"
  "###   output: pdf document\n\n"
  ".SUFFIXES: .Rmd .tex .pdf .dvi .ps\n"
  "HIDE=default\n"
  "RmdFILES = $(wildcard *.Rmd)\n"
  "MD = $(patsubst %.Rmd,%.md,$(RmdFILES)) #$(wildcard *.md)\n"
  "TEX = $(patsubst %.Rmd,%.tex,$(RmdFILES))\n\n"
  "TARGET = " name "\n"
  ;;"LATEX_ARGS=--interaction=nonstopmode --output-driv=\"xdvipdfmx -vv -V 4\"\n"
;;  "PANDOC_ARGS=-s -S -i --template=template -H end.template -B start.template -A end1.template --mathjax --bibliography='/home/murray/Dropbox/Work/Resources/References/References.bib' --reference-links \n"
  "PANDOC_PDFLATEX_ARGS = -s --template='/home/murray/Dropbox/Work/Resources/Scripts/pandoc/elsarticle' --bibliography='/home/murray/Dropbox/Work/Resources/References/References.bib' --reference-links -N --latex-engine=pdflatex #--csl '/home/murray/Dropbox/Work/Resources/References/oecologia.csl' \n" 
  "PDFLATEX_ARGS=--interaction=nonstopmode --output-driv=\"xdvipdfmx -vv -V 4\"\n"
  "PANDOC=pandoc\n"
  
  "PDFS=$(wildcard figures/*.pdf)\n"
  "JPGS=$(patsubst %.pdf, %.jpg, $(PDFS))\n"
  "EPSS=$(patsubst %.pdf, %.eps, $(PDFS))\n"
  "CONVERT = convert -density 300 -resize 33% -background white -flatten\n\n"
  "#KNITRMD=$(patsubst %.Rmd, %_knit_.Rmd, $(RmdFILES))\n"

  "MASTER = " str ".html\n" 
  "DEPENDS = $(TARGET).md\n\n"

  ".SECONDARY:  #this is in place to prevent make from removing intermediatory files (like *.Lmd)\n"

  "%.Lmd: %.Rmd\n"
  "		echo $@\n"
  "		$(eval KNITRMD := $(patsubst %.Rmd, %_knit_.rmd, $<))\n"
  "		echo \"library(knitr); purl(\\\"$<\\\")\" | R --no-save --no-restore\n"
  "		cat *.R > all.R\n"
  "		cp $< $(KNITRMD)\n"
  "		sed -i -e '/<top>/{r /home/murray/Dropbox/Work/Resources/Scripts/knitHooksLatex' -e 'd}' $(KNITRMD)\n"	
  "		echo \"library(knitr); knit(\\\"$(KNITRMD)\\\",output=\\\"$@\\\")\" | R --no-save --no-restore\n"	
  "		sed -i \"s/caption{Table [0-9]*\.\ /caption{/g\" $@ #remove table counter - latex will do this\n\n"

  "%.tex: %.Lmd\n"
  "		$(eval TMP := $(patsubst %.Lmd, %.lmd, $<))\n"
  "		echo $(TMP)\n"
  "		cp $< $(TMP)\n"
  "ifeq ($(HIDE),TRUE)\n"
  "	 sed -i '/<div class=\\\"hidden\\\".*>/,/^<\\/div class=\\\"hidden\\\">/d' $(TMP)\n"
  "endif\n"
  "		$(PANDOC) $(PANDOC_PDFLATEX_ARGS) -f 'markdown' *.lmd -o $(TARGET).tex\n\n"

  "pdf: $(TEX) #$(TARGET).tex\n"
  "		sed -i 's/includegraphics{images/includegraphics\\[width=\\\\maxwidth\\]{images/g' $(TARGET).tex\n"
  "		sed -i 's/\\\\centering/\\\\centering\\\\scriptsize/g' $(TARGET).tex #indicate smaller font for tables\n" 
  "		pdflatex $(PDFLATEX_ARGS) $(TARGET).tex\n"
  "		pdflatex $(PDFLATEX_ARGS) $(TARGET).tex\n"
  "		pdflatex $(PDFLATEX_ARGS) $(TARGET).tex\n\n"

  
  "figs: $(JPGS) $(EPSS)\n\n"

  "%.jpg: %.pdf\n"
  "		@echo ** Building jpg images from pdf versions**\n"
  "		$(CONVERT) $< $@\n\n"

  "%.eps: %.pdf\n"
  "		pdf2ps -dLanguageLevel=3 $< $@\n\n"

  "figures::\n" 
  "		for image_file in $(wildcard figures/*.pdf); \\\ \n"
  "		do \\\ \n"
  "				convert -density 300 -quality 100 $${image_file} $${image_file}.jpg; \\\ \n"
  "		done;\n\n"

  "		for image_file in $(wildcard figures/*.pdf); \\\ \n"
  "		do \\\ \n"
  "				convert -density 300 -quality 100 $${image_file} $${image_file}.tiff; \\\ \n"
  "		done;\n\n"

  "		for image_file in $(wildcard figures/*.pdf); \\\ \n"
  "		do \\\ \n"
  "				pdftops -eps -level3 $${image_file}; \\\ \n"
  "		done;\n\n"

  "clean:\n"
  "	rm *.toc *.aux *.pdf *.ps *.eps *.log *.lof *.bib *.bbl *.blg *.dvi *.tex *.map *.md\n"
  
  "zip:\n"
  "		zip $(TARGET).zip $(TARGET).html *.R data/*.* figures/*.* scripts/*.* fonts/*.*\n"
  )


(define-skeleton markdown-knitr-pandoc-makefile 
  "Inserts a basic markdown, knitr and pandoc makefile skeleton into a buffer."
  ;;"filename: "
  ;;(find-file "Makefile")
  "\n"
  "## Usage\n"
  "##  make html -i HIDE=TRUE\n"
  "###   output: html with hidden content\n"
  "##  make html -i\n"
  "###   output: html with revealed content\n"
  "##  make pdf -i HIDE=TRUE\n"
  "###   output: pdf with hidden content\n"
  "##  make pdf -i\n"
  "###   output: pdf with revealed content\n\n"
  ".SUFFIXES: .Rmd .html .rnw .tex .pdf .dvi .ps\n"
  "HIDE=default\n"
  "RmdFILES = $(wildcard *.Rmd)\n"
  "MD = $(patsubst %.Rmd,%.md,$(RmdFILES)) #$(wildcard *.md)\n"
  "TEX = $(patsubst %.Rmd,%.tex,$(RmdFILES))\n"
  "HMD = $(patsubst %.Rmd,%.hmd,$(RmdFILES))\n"
  "DOCX = $(patsubst %.Rmd,%.Dmd,$(RmdFILES))\n\n"
  "TARGET = " name "\n"
  ;;"LATEX_ARGS=--interaction=nonstopmode --output-driv=\"xdvipdfmx -vv -V 4\"\n"
;;  "PANDOC_ARGS=-s -S -i --template=template -H end.template -B start.template -A end1.template --mathjax --bibliography='/home/murray/Dropbox/Work/Resources/References/References.bib' --reference-links \n"
  "PANDOC_ARGS=-s -S -i --template='/home/murray/Dropbox/Work/Resources/Scripts/pandoc/template' --bibliography='/home/murray/Dropbox/Work/Resources/References/References.bib' --reference-links \n"
  "PANDOC_SC_ARGS =-s -S -i --template='/home/murray/Dropbox/Work/Resources/Scripts/pandoc/template_sc' --bibliography='/home/murray/Dropbox/Work/Resources/References/References.bib'  --reference-links  --self-contained #--csl '/home/murray/Dropbox/Work/Resources/References/oecologia.csl'\n"
  "PANDOC_XELATEX_ARGS = -s --template='/home/murray/Dropbox/Work/Resources/Scripts/pandoc/default' --bibliography='/home/murray/Dropbox/Work/Resources/References/References.bib' --reference-links -N --latex-engine=xelatex --toc #--csl '/home/murray/Dropbox/Work/Resources/References/oecologia.csl' \n" 
  "XELATEX_ARGS=--interaction=nonstopmode --output-driv=\"xdvipdfmx -vv -V 4\"\n"
  "XELATEX_ARGS=--interaction=batchmode\n"
  "PANDOC_DOC_ARGS=  -s -S -i --bibliography='/home/murray/Dropbox/Work/Resources/References/References.bib'  #--csl '/home/murray/Dropbox/Work/Resources/References/oecologia.csl' --reference-docx='/home/murray/Dropbox/Work/Resources/Templates/AIMS.docx'\n\n"
  
  "PANDOC=pandoc\n"
  
  "PDFS=$(wildcard figures/*.pdf)\n"
  "JPGS=$(patsubst %.pdf, %.jpg, $(PDFS))\n"
  "EPSS=$(patsubst %.pdf, %.eps, $(PDFS))\n"
  "CONVERT = convert -density 300 -resize 33% -background white -flatten\n\n"
  "#KNITRMD=$(patsubst %.Rmd, %_knit_.Rmd, $(RmdFILES))\n"

  "MASTER = " str ".html\n" 
  "DEPENDS = $(TARGET).md\n\n"

  ".SECONDARY:  #this is in place to prevent make from removing intermediatory files (like *.Lmd)\n"
  "%.Dmd: %.Rmd\n"
  "		echo $@\n"
  "		$(eval KNITRMD := $(patsubst %.Rmd, %_knit_.dmd, $<))\n"
  "		cp $< $(KNITRMD)\n"
  "		sed -i 's/<top>//g' $(KNITRMD)\n"
  "		sed -i 's/\\\({r.*\\\)}/\\\1, dpi=400}/g' $(KNITRMD)\n"
  "		#echo \"library(knitr); purl(\\\"$<\\\")\" | R --no-save --no-restore\n"
  "		echo \"library(knitr); knit(\\\"$(KNITRMD)\\\",output=\\\"$@\\\")\" | R --no-save --no-restore\n\n"

  "docx: $(DOCX)\n"
  "		$(PANDOC) $(PANDOC_DOC_ARGS) *.Dmd -o $(TARGET).docx\n\n"

  "%.Lmd: %.Rmd\n"
  "		echo $@\n"
  "		$(eval KNITRMD := $(patsubst %.Rmd, %_knit_.rmd, $<))\n"
  "		echo \"library(knitr); purl(\\\"$<\\\")\" | R --no-save --no-restore\n"
  "		cat *.R > all.R\n"
  "		cp $< $(KNITRMD)\n"
  "		sed -i \"s/='png'/='pdf'/g\" $(KNITRMD) #produce pdf graphics\n"
  "		sed -i \"s/='html'/='latex'/g\" $(KNITRMD) #produce latex tables\n"
  "		sed -i \"s/sanitize.colnames.function=NULL/sanitize.colnames.function=bold.names/g\" $(KNITRMD) #produce latex tables\n"
  "		sed -i -e '/<top>/{r /home/murray/Dropbox/Work/Resources/Scripts/knitHooksLatex' -e 'd}' $(KNITRMD)\n"	
  "		echo \"library(knitr); knit(\\\"$(KNITRMD)\\\",output=\\\"$@\\\")\" | R --no-save --no-restore\n"	
  "		sed -i \"s/caption{Table [0-9]*\.\ /caption{/g\" $@ #remove table counter - latex will do this\n\n"


  "%.tex: %.Lmd\n"
  "		$(eval TMP := $(patsubst %.Lmd, %.lmd, $<))\n"
  "		echo $(TMP)\n"
  "		cp $< $(TMP)\n"
  "ifeq ($(HIDE),TRUE)\n"
  "	 sed -i '/<div class=\\\"hidden\\\".*>/,/^<\\/div class=\\\"hidden\\\">/d' $(TMP)\n"
  "endif\n"
  "		$(PANDOC) $(PANDOC_XELATEX_ARGS) -f 'markdown' *.lmd -o $(TARGET).tex\n\n"

  "pdf: $(TEX) #$(TARGET).tex\n"
  "		sed -i 's/includegraphics{images/includegraphics\\[width=\\\\maxwidth\\]{images/g' $(TARGET).tex\n"
  "		sed -i 's/\\\\centering/\\\\centering\\\\scriptsize/g' $(TARGET).tex #indicate smaller font for tables\n" 
  "		xelatex $(XELATEX_ARGS) $(TARGET).tex\n"
  "		xelatex $(XELATEX_ARGS) $(TARGET).tex\n"
  "		xelatex $(XELATEX_ARGS) $(TARGET).tex\n\n"

  "%.Hmd: %.Rmd\n"
  "		$(eval KNITRMD := $(patsubst %.Rmd, %_knit_.rmd, $<))\n"
  "		echo \"library(knitr); purl(\\\"$<\\\")\" | R --no-save --no-restore\n"
  "		cat *.R > all.R\n"
  "		cp $< $(KNITRMD)\n"  
  "		sed -i -e '/<top>/{r /home/murray/Dropbox/Work/Resources/Scripts/knitHooks' -e 'd}' $(KNITRMD)\n"
  "		echo \"library(knitr); knit(\\\"$(KNITRMD)\\\",output=\\\"$@\\\")\" | R --no-save --no-restore\n\n"		

  "%.hmd: %.Hmd\n"
  "	 	$(eval TMP := $(patsubst %.Hmd, %_knit_.hmd, $<))\n"
  "	 	cp $< $(TMP)\n"
  "ifeq ($(HIDE),TRUE)\n"
  "	 sed -i '/<div class=\\\"hidden\\\".*>/,/^<\\/div class=\\\"hidden\\\">/d' $(TMP)\n"
  "endif\n\n"

  "html: $(HMD)\n"
  "		$(PANDOC) $(PANDOC_ARGS) *.hmd > $(TARGET).html\n"
  "		sed -i -e '/?config=TeX-AMS_HTML-full/' -e 'd}' *.hmd\n"
  "		$(PANDOC) $(PANDOC_SC_ARGS) *.hmd > $(TARGET)_sc.html\n\n"
  
  "figs: $(JPGS) $(EPSS)\n\n"

  "%.jpg: %.pdf\n"
  "		@echo ** Building jpg images from pdf versions**\n"
  "		$(CONVERT) $< $@\n\n"

  "%.eps: %.pdf\n"
  "		pdf2ps -dLanguageLevel=3 $< $@\n\n"

  "figures::\n" 
  "		for image_file in $(wildcard figures/*.pdf); \\\ \n"
  "		do \\\ \n"
  "				convert -density 300 -quality 100 $${image_file} $${image_file}.jpg; \\\ \n"
  "		done;\n\n"

  "		for image_file in $(wildcard figures/*.pdf); \\\ \n"
  "		do \\\ \n"
  "				convert -density 300 -quality 100 $${image_file} $${image_file}.tiff; \\\ \n"
  "		done;\n\n"

  "		for image_file in $(wildcard figures/*.pdf); \\\ \n"
  "		do \\\ \n"
  "				pdftops -eps -level3 $${image_file}; \\\ \n"
  "		done;\n\n"

  "clean:\n"
  "	rm *.toc *.aux *.pdf *.ps *.eps *.log *.lof *.bib *.bbl *.blg *.dvi *.tex *.map *.md\n"
  
  "zip:\n"
  "		zip $(TARGET).zip $(TARGET).html *.R data/*.* figures/*.* scripts/*.* fonts/*.*\n"
  )


(define-skeleton elsarticle-R-skeleton
  "Inserts a basic LaTeX Noweb skeleton into the current buffer."
  "Document title: "
  "---\n"
  "type: review,3p\n"
  "title: '" str "'\n"
  "author:\n"
  "- name: M. Logan\n"
  "  af: aims\n"
  "  affiliation: Australian Institute of Marine Science, PMB No 3, Townsville, Queensland 4810, Australia\n"
  "keyword: Bla, Bla, Bla\n"
  "abstract: |\n"
  " This is the abstract.\n\n"
  " With two paragraphs.\n"
  "...\n\n"
  "<top>\n\n"
  "\n"


  "```{r libraries, echo=FALSE}\n"
  "library(dplyr)\n"
  "library(reshape2)\n"
  "library(ggplot2)\n"
  "library(grid)\n"
  "library(gridExtra)\n"
  "library(lubridate)\n"
  "```\n\n"
  
  "Introduction\n"
  "===================\n\n"

  "Methods\n"
  "===================\n\n"

  "Results\n"
  "===================\n\n"

  "Discussion\n"
  "===================\n\n"

  "References\n"
  "====================\n\n"


)

(define-skeleton markdown-knitr-pandoc-skeleton
  "Inserts a basic LaTeX Noweb skeleton into the current buffer."
  "Document title: "
  "% " str "\n"
  "% " author "\n"
  "% " (format-time-string "%d-%m-%Y" (current-time)) "\n\n"
  "<top>\n\n"
  "\n"


  "Preparations\n"
  "===================\n"

  "## Read in data\n\n"
  "```{r, reveal=TRUE}\n"
  "a <- 100\n"
  "a\n"
  "```\n\n"

  "References\n"
  "====================\n"
  "This document was produced from markdown using knitr on `r version$version.string` on a `r version$platform` system.\n\n"

  "```{r, results='markdown'}\n"
  "sessionInfo()\n"
  "```\n\n"

)

(define-skeleton markdown-knitr-pandoc-skeleton-01
  "Inserts a basic LaTeX Noweb skeleton into the current buffer."
  "Document title: "
  "% " str "\n"
  "% " author "\n"
  "% " (format-time-string "%d-%m-%Y" (current-time)) "\n\n"
  "<top>\n\n"
  "\n"


  "Data importation\n"
  "===================\n"
  "## Load libraries\n\n"
  "```{r libraries, reveal=TRUE, results='markdown'}\n"
  "source('helperFunctions.R')\n"
  "\n"
  "```\n"
  "## Read in data\n\n"
  "```{r readData, reveal=TRUE, results='markdown'}\n"
  "a <- 100\n"
  "a\n"
  "```\n"
)

(define-skeleton markdown-knitr-pandoc-skeleton-helperFunctions
  "Inserts a basic LaTeX Noweb skeleton into the current buffer."
  "Document title: "
  "## The following are helper Functions\n\n"
)

(define-skeleton markdown-knitr-pandoc-skeleton-02
  "Inserts a basic LaTeX Noweb skeleton into the current buffer."
  "Document title: "
  "<top>\n\n"
  "\n"

  "Data processing\n"
  "===================\n"
  "## Process the data\n\n"
  "```{r, reveal=TRUE, results='markdown'}\n"
  "a <- 100\n"
  "a\n"
  "```\n"
)

(define-skeleton markdown-knitr-pandoc-skeleton-05
  "Inserts a basic LaTeX Noweb skeleton into the current buffer."
  "Document title: "
  "<top>\n\n"
  "\n"

  "Data analysis\n"
  "===================\n"
  "## Read in data\n\n"
  "```{r, reveal=TRUE, results='markdown'}\n"
  "a <- 100\n"
  "a\n"
  "```\n\n"
  "Generalized Additive Mixed Models [GAMMs; @Wood-2006-2006].\n"
)

(define-skeleton markdown-knitr-pandoc-skeleton-07
  "Inserts a basic LaTeX Noweb skeleton into the current buffer."
  "Document title: "
  "<top>\n\n"
  "\n"

  "Summaries\n"
  "===================\n"
  "## Read in data\n\n"
  "```{r, reveal=TRUE,results='markdown'}\n"
  "a <- 100\n"
  "a\n"
  "```\n"
)

(define-skeleton markdown-knitr-pandoc-skeleton-09
  "Inserts a basic LaTeX Noweb skeleton into the current buffer."
  "Document title: "
  "<top>\n\n"
  "\n"

  "Appendix\n"
  "====================\n"
  "This document was produced from markdown using knitr on `r version$version.string` on a `r version$platform` system.\n\n"
  "```{r, reveal=TRUE,results='markdown'}\n"
  "a <- system('cat all.R',intern=TRUE)\n"
  "a <- gsub('## ----.*','',a)\n"
  "a <- paste(a,collapse='\\n')\n"
  "a<-gsub('\\n\\n\\n\\n\\n','\\n\\n',a)\n"
  "cat(paste(a,collapse='\\n'))\n"

  "```\n"

  "References\n"
  "====================\n"
  


)

(define-skeleton markdown-knitr-templates
  "Inserts a basic LaTeX Noweb skeleton into the current buffer."
  "Document title: "
  "## The following are templates that can be pasted into a Rmd file\n\n"
  "### Inserting in-text citations"
  "Generalized Additive Mixed Models [GAMMs; @Wood-2006-2006].\n"
  "### Tables\n"

)
;; ----End of markdown-knitr-pandoc---------------------------------------------------






(defun knitr-xelatex ()
  ;;  (interactive "sfilename:?")
  (interactive)
  (setq var (split-string (read-from-minibuffer "Enter filename: "nil nil nil nil nil nil) " "))
  (setq name (car var))
  (shell-command "mkdir figures")
  (shell-command "mkdir cache")
  (shell-command "mkdir data")
  (find-file "Makefile")
  (xelatex-knitr-makefile name)
  (save-buffer)
  (kill-buffer "Makefile")
  (find-file (concat name ".rnw"))
  (xelatex-knitr-skeleton)
  (save-buffer)
  )

(define-skeleton xelatex-knitr-makefile 
  "Inserts a basic noweb xelatex with knitr makefile skeleton into a buffer."
  ;;"filename: "
  ;;(find-file "Makefile")
  ".SUFFIXES: .rnw .tex .pdf .dvi .ps\n"
  "RNWFILES = $(wildcard *.rnw)\n"
  "TEX = $(patsubst %.rnw,%.tex,$(RNWFILES)) #$(wildcard *.tex)\n"
  "TARGET = " name "\n"
  ;;"LATEX_ARGS=--interaction=nonstopmode --output-driv=\"xdvipdfmx -vv -V 4\"\n"
  "LATEX_ARGS=--interaction=batchmode\n"
  ;;  "LATEX_ARGS=\"-interaction=nonstopmode\"\n"
  "LATEX=xelatex\n"
  "RERUNBIB = \"No file.*\\\ .bbl|Citation.*undefined\"\n"
  "RERUNINDEX = \"No file.*\\\ .ind\"\n\n"
  
  "PDFS=$(wildcard figures/*.pdf)\n"
  "JPGS=$(patsubst %.pdf, %.jpg, $(PDFS))\n"
  "EPSS=$(patsubst %.pdf, %.eps, $(PDFS))\n"
  "CONVERT = convert -density 300 -resize 33% -background white -flatten\n\n"

  "MASTER = " str ".pdf\n" 
  "DEPENDS = $(TARGET).tex\n\n"
  "$(MASTER): $(DEPENDS)\n\n"
  
  "%.tex: %.rnw\n"
;;  "		echo \"library(pgfSweave); setCacheDir('cache'); pgfSweave(\\\"$<\\\")\" | R --no-save --no-restore\n\n"
  "		echo \"library(knitr); knit(\\\"$<\\\")\" | R --no-save --no-restore\n\n"
;;  "		echo \"Stangle(\\\"$<\\\")\" | R --no-save --no-restore\n\n"
  "		echo \"library(knitr); purl(\\\"$<\\\")\" | R --no-save --no-restore\n\n"  
;;  "       echo \"library(pgfSweave); setCacheDir('cache'); pgfSweave(\\\"$<\\\", graphics.only=T,compile.tex=F,pdf=F)\" | R --no-save --no-restore\n\n"
;;  "		echo \"library(cacheSweave); library(highlight); setCacheDir('cache'); Sweave(\\\"$<\\\", driver = HighlightWeaveLatex(boxes=T,bg=rgb(255,255,204,max=255)))\" | R --no-save --no-restore \n"
;;  "		  echo \"library(cacheSweave); setCacheDir('cache'); Sweave(\\\"$<\\\", driver = cacheSweaveDriver)\" | R --no-save --no-restore\n\n"
;;  "		echo \"Stangle(\\\"$<\\\")\" | R --no-save --no-restore\n\n"
;;  "		echo \"sed s/,.size=scriptsize//g \\\"$<\\\" > junk\" \n"
;;  "		echo \"Stangle(\\\"junk\\\",output=\\\"$(TARGET).R\\\")\" | R --no-save --no-restore\n\n"
;;  "		echo \"rm(junk)\" \n"
 
  "$(TARGET).pdf: $(TEX)\n"
  "	$(LATEX) $(LATEX_ARGS) $(TARGET).tex;\n"
  "	while \\\ egrep -c $(RERUNBIB) $(TARGET).log; \\\ \n"
  "	do \\\ \n"
  "		bibtex $(TARGET); \\\ \n"
  "		$(LATEX) $(LATEX_ARGS) $(TARGET).tex; \\\ \n"
  "	done\n"
  "	while \\\ grep -q \"Rerun to get cross-references right.\" \\\ \n"
  "	$(TARGET).log; \\\ \n"
  "	do \\\ \n"
  "		$(LATEX) $(LATEX_ARGS) $(TARGET).tex; \\\ \n"
  "	done\n"
;;  "	$(LATEX) $(LATEX_ARGS) $(TARGET).tex;\n\n"
  
  "figs: $(JPGS) $(EPSS)\n\n"

  "%.jpg: %.pdf\n"
  "		@echo ** Building jpg images from pdf versions**\n"
  "		$(CONVERT) $< $@\n\n"

  "%.eps: %.pdf\n"
  "		pdf2ps -dLanguageLevel=3 $< $@\n\n"

  "figures::\n" 
  "		for image_file in $(wildcard figures/*.pdf); \\\ \n"
  "		do \\\ \n"
  "				convert -density 300 -quality 100 $${image_file} $${image_file}.jpg; \\\ \n"
  "		done;\n\n"

  "		for image_file in $(wildcard figures/*.pdf); \\\ \n"
  "		do \\\ \n"
  "				convert -density 300 -quality 100 $${image_file} $${image_file}.tiff; \\\ \n"
  "		done;\n\n"

  "		for image_file in $(wildcard figures/*.pdf); \\\ \n"
  "		do \\\ \n"
  "				pdftops -eps -level3 $${image_file}; \\\ \n"
  "		done;\n\n"

  "clean:\n"
  "	rm *.toc *.aux *.pdf *.ps *.eps *.log *.lof *.bib *.bbl *.blg *.dvi *.tex *.map\n"
  
  "zip:\n"
  "		zip $(TARGET).zip $(TARGET).pdf *.R figures/*.* \n"
  )

;;-- xelatex template ########################################################-------------------------------------------------------------------------------------
(define-skeleton xelatex-knitr-skeleton
  "Inserts a basic LaTeX Noweb skeleton into the current buffer."
  "Document title: "
  "\\SweaveOpts{background='#FFFFCC',cache.path='cache/',fig.path='figures/fig',fig.align='center',prompt=TRUE, highlight=TRUE,comment=NA, results='markup', par=TRUE}\n"
  "\\title{" str "}\n"
  "\\documentclass[a4paper]{article}\n"
  "\\newif\\iffinished\n"
  "\\finishedtrue\n"
  "\\iffinished\n"
  "\\usepackage[T1]{fontenc}        %for specifying any fonts\n"
  "\\usepackage{calligra}\n"
  "\\usepackage{rotating}           %for sideways tables\n"
  "\\usepackage{marvosym}\n"
  "\\usepackage{listings}		    %provides lstset for formating inserted computer code\n"
  "\\usepackage{tabularx}           %for tables\n"
  "\\usepackage{color,graphicx}\n"
  "\\usepackage[table]{xcolor}\n"
  "\\usepackage{colortbl}\n"
  "\\usepackage{tikz}\n"
  "\\renewcommand{\\familydefault}{\\sfdefault}\n"
  "\\usetikzlibrary{backgrounds}\n"
  "\\usetikzlibrary{shadows}\n"
  "\\usepackage{wrapfig}\n"
  "\\usepackage[lmargin=1.75cm,rmargin=1.5cm, tmargin=1.5cm, a4paper]{geometry}\n"
  "%-----Define Provision for bibliography-----------\n"
  "\\usepackage{natbib}\n"
  "\\usepackage{bibentry}\n"
  "%-------------------------------------------------\n"
  "\\usepackage{bbding}\n"
  "%---Define some colors--------------------------\n"
  "\\definecolor{backgroundColor}{HTML}{CC3300}\n"
  "\\definecolor{linkcolour}{HTML}{393939} %{FF0080}	%light purple link for the email\n"
  "\\definecolor{shade}{HTML}{D4D7FE}		%light blue shade\n"
  "\\definecolor{text1}{HTML}{2b2b2b}		%text is almost black\n"
  "\\definecolor{headings}{HTML}{0099e3} 	%light blue\n"
  "\\definecolor{lightgray}{gray}{0.9} 		%light gray\n"
  "\\definecolor{rinput}{HTML}{FF0000}     %dark blue\n"
  "\\definecolor{routput}{HTML}{033197}     %dark blue\n"
  "\\definecolor{rbackground}{HTML}{FFFFCC}\n"
  "%-------------------------------------------------\n"
  "\\usepackage{hyperref}\n"
  "\\hypersetup{colorlinks,breaklinks,urlcolor=linkcolour,linkcolor=linkcolour, citecolor=routput}\n"
  "\\renewcommand*\\sfdefault{lmssq}\n"
  "%-Redefine the section title formats--------------\n"
  "\\usepackage{titlesec}\n"
  "\\titleformat{\\section}{\\Large\\sf\\bfseries\\raggedright\\color{headings}\\thesection. }{}{0em}{}[\\titlerule]\n"
  "\\titlespacing{\\section}{0pt}{3pt}{3pt}\n"
  "\\titleformat{\\subsection}{\\large\\sf\\bfseries\\itshape\\raggedright\\color{headings}\\thesubsection. }{}{0em}{}\n"
  "\\titlespacing{\\subsection}{0pt}{3pt}{3pt}\n"
  "\\titleformat{\\subsubsection}{\\normalsize\\sf\\bfseries\\itshape\\raggedright\\color{headings}\\thesubsubsection. }{}{0em}{}\n"
  "\\titlespacing{\\subsubsection}{0pt}{3pt}{3pt}\n"
  "%-------------------------------------------------\n"
  "%---Define a new list style-----------------------\n"
  "\\newenvironment{my_itemize}\n"
  "\{\\begin{list}{\\labelitemi}{\\leftmargin=1em}\n"
  "\}\n"
  "\{\\end{list}}\n"
  "%-------------------------------------------------\n"
  "\\usepackage{eso-pic}\n"
  "%--Put a silhouette at the bottom of the page-----\n"
  "\\graphicspath{{\\string~/Dropbox/Work/Resources/Images/}}\n"
  "\\newcommand\\BackgroundPic{\n"
  "\\put(-10,0){\n"
  "\\parbox[b][\\paperheight]{\\paperwidth}{%\n"
  "\\includegraphics[width=220mm, height=20mm]{header.png}%\n"
  "\\vfill\n"
  "\\includegraphics{footer.png}%\n"
  "\}}}\n"
  "%-------------------------------------------------\n"
  "%--Put a blue bar on the left hand side of the page---\n"
  "%\\newcommand\\SidePic{\n"
  "%\\put(-30,\\pageheight){\n"
  "%\\includegraphics[width=23mm, height=31cm]{/home/murray/Work/Resume/blueSide.png}\n"
  "%\\hspace{-2mm}{\\color{gray}\\rule{.5mm}{300mm}}{\\color{black}\\rule{.25mm}{300mm}}\n"
  "%\}}\n"
  "%-------------------------------------------------\n"
  "%--Place   DRAFT ONLY  on each page---------------\n"
  "\\usepackage{fontspec}\n"
  "\\newcommand\\DraftWord{\n"
  "\\AtTextCenter{%\n"
  "\\makebox(0,0)[c]{\\resizebox{\\textwidth}{!}{%\n"
  "\\rotatebox{45}{\\textsf{\\textbf{\\color{lightgray}{\\fontspec[ExternalLocation=\\string~/Dropbox/Config/Fonts/]{angelina.TTF}\\fontsize{80pt}{0pt}\\selectfont Draft Only}}}}\n"
  "\}}\n"
  "\}\n"
  "\}\n"
  "\\fi\\n"
  "%-------------------------------------------------\n"
  "\\pretolerance=2000\n"
  "\\tolerance=2000\n"
  "%\\usepackage[noae]{/usr/local/lib/R/share/texmf/Sweave}\n"
  "\\usepackage[noae]{Sweave}\n"
  "\\iffinished\n"
  "%--Alter the default format of the R code/output--\n"
  "\\DefineVerbatimEnvironment{Sinput}{Verbatim}{fontsize=\\scriptsize,fontshape=sl,formatcom={\\color{rinput}}}\n"
  "\\DefineVerbatimEnvironment{Soutput}{Verbatim}{\\vspace{-2em},fontsize=\\scriptsize,formatcom={\\color{routput}}}\n" 
  "\\DefineVerbatimEnvironment{Scode}{Verbatim}{fontshape=sl,formatcom={\\color{headings}}}\n" 
  "\\fvset{listparameters={\\setlength{\\topsep}{1em}}}\n"
  "%\\renewenvironment{Houtput}{%\n"
  "% \\begin{scriptsize}\n"
  "%    \\color{routput}\n"
  "%    \\par\n"
  "%    \\tikzexternaldisable\n"
  "%    \\begin{tikzpicture}\n"
  "%      \\node[fill=rbackground,rectangle,minimum width=0.9\\textwidth] (m)\n"
  "%      \\bgroup\\begin{minipage}{0.85\\textwidth}%\n"
  "%}\n"
  "%{%\n"
  "%  \\end{minipage}\\egroup;\n"
  "%  \\draw[dashed] (m.south west) rectangle (m.north east);\n"
  "%  \\end{tikzpicture}\n"
  "%  \\end{scriptsize}\n"
  "%\\\\ \n" 
  "%}\n"

  "\\definecolor{highlightBg}{rgb}{1,1,0.8}\n"
  "\\definecolor{highlightBorder}{rgb}{0,0,0}\n"
  "\\definecolor{white}{rgb}{1,1,1}\n"
  "\\definecolor{orangeColor}{HTML}{FF9900}\n"

  "%\\renewenvironment{Hchunk}{% \n"
  "% \\color{routput}\n"
  "% \\par\n"
  "% \\begin{tikzpicture}\n"
  "%  \\node[fill=rbackground,rectangle,minimum width=0.9\\textwidth] (m)\n"
  "%  \\bgroup\\begin{minipage}{0.85\\textwidth}%\n"
  "%}{%\n"
  "%  \\end{minipage}\\egroup;\n"
  "%  \\draw[dashed] (m.south west) rectangle (m.north east);\n"
  "%  \\end{tikzpicture}\\\\ \n" 
  "%}\n"

  "%\\newenvironment{elaboration}{%\n"
  "%  \\par\n"
  "%  \\begin{tikzpicture}\n"
  "%  \\node[fill=rbackground,rectangle,minimum width=0.9\textwidth] (m)\n"
  "%  \\bgroup\\begin{minipage}{0.85\\textwidth}%\n"
  "% }{%\n"
  "%  \\end{minipage}\\egroup;\n"
  "%  \\draw[dashed] (m.south west) rectangle (m.north east);\n"
  "%  \\end{tikzpicture}\\\\ \n"
  "% }\n"

  "%\\makeatletter\n"
  "%\\renewenvironment{Schunk}{\\begin{elaboration}}{\\end{elaboration}}\n"
  "%\\makeatother\n"

  "%\\renewenvironment{Schunk}{\\vspace{\\topsep}}{\\vspace{\\topsep}}\n"
  "%-------------------------------------------------\n"
  "%--Change the format of the captions--------------\n"
  "% Different font in captions\n"
  "\\newcommand{\\captionfonts}{\\small\\sf}\n"
  "\\makeatletter  % Allow the use of @ in command names\n"
  "\\long\\def\\@makecaption#1#2{%\n"
  "\\vskip\\abovecaptionskip\n"
  "\\sbox\\@tempboxa{{\\captionfonts #1: \\em#2}}%\n"
  "\\ifdim \\wd\\@tempboxa >\\hsize\n"
  "{\\captionfonts #1: \\em#2\\par}\n"
  "\\else\n"
  "\\hbox to\\hsize{\\hfil\\box\\@tempboxa\\hfil}%\n"
  "\\fi\n"
  "\\vskip\\belowcaptionskip}\n"
  "\\makeatother   % Cancel the effect of \\makeatletter\n"
  "%-------------------------------------------------\n"
  "%--Change the page formatting---------------------\n"
  "% Change the format of the page numbers\n"
  "\\usepackage{fancyhdr}\n"
  "\\pagestyle{fancy}\n"
  "\\fancyhf{} % clear all header and footer fields\n"
  "\\fancyhead[RE,LO]{\\hfill\\bfseries\\sf \\color{white}\\thepage}\n"
  "%\\fancyfoot[RE,LO]{\\hfill\\bfseries\\sf \\thepage}\n"
  "\\renewcommand{\\headrulewidth}{0pt}\n"
  "%-------------------------------------------------\n"
  "%--Change the name used for the table of contents-\n"
  "\\renewcommand{\\contentsname}{Table of contents}\n"
  "%-------------------------------------------------\n"

  "\\setlength\\parindent{0pt}\n"
  "\\setmonofont[Scale=MatchLowercase, ExternalLocation=\\string~/Dropbox/Config/Fonts/]{DejaVuSansMono.ttf}\n"
  "\\renewcommand{\\hlcomment}[1]{\\textcolor[HTML]{3C802C}{#1}}%\n"
  "\\renewcommand{\\hlstring}[1]{\\textcolor[HTML]{ED7722}{#1}}%\n"
  "\\renewcommand{\\hlfunctioncall}[1]{\\textcolor[HTML]{053369}{#1}}%\n"
  "\\renewcommand{\\hlnumber}[1]{\\textcolor[HTML]{0F20F6}{#1}}%\n"
  "\\renewcommand{\\hlkeyword}[1]{\\textcolor[HTML]{AA1F63}{\\textbf{#1}}}%\n"
  "\\renewcommand{\\hlargument}[1]{\\textcolor[HTML]{053369}{#1}}%\n"

  "\\setbox\\hlnormalsizeboxopenbrace=\\hbox{\\begin{scriptsize}\\verb.{.\\end{scriptsize}}%\n"
  "\\setbox\\hlnormalsizeboxclosebrace=\\hbox{\\begin{scriptsize}\\verb.}.\\end{scriptsize}}%\n"
  "\\setbox\\hlnormalsizeboxlessthan=\\hbox{\\begin{scriptsize}\\verb.<.\\end{scriptsize}}%\n"
  "\\setbox\\hlnormalsizeboxdollar=\\hbox{\\begin{scriptsize}\\verb.$.\\end{scriptsize}}%\n"
  "\\setbox\\hlnormalsizeboxunderscore=\\hbox{\\begin{scriptsize}\\verb._.\\end{scriptsize}}%\n"
  "\\setbox\\hlnormalsizeboxand=\\hbox{\\begin{scriptsize}\\verb.&.\\end{scriptsize}}%\n"
  "\\setbox\\hlnormalsizeboxhash=\\hbox{\\begin{scriptsize}\\verb.#.\\end{scriptsize}}%\n"
  "\\setbox\\hlnormalsizeboxat=\\hbox{\\begin{scriptsize}\\verb.@.\\end{scriptsize}}%\n"
  "\\setbox\\hlnormalsizeboxbackslash=\\hbox{\\begin{scriptsize}\\verb.\\.\\end{scriptsize}}%\n"
  "\\setbox\\hlnormalsizeboxgreaterthan=\\hbox{\\begin{scriptsize}\\verb.>.\\end{scriptsize}}%\n"
  "\\setbox\\hlnormalsizeboxpercent=\\hbox{\\begin{scriptsize}\\verb.%.\\end{scriptsize}}%\n"
  "\\setbox\\hlnormalsizeboxhat=\\hbox{\\begin{scriptsize}\\verb.^.\\end{scriptsize}}%\n"
  "\\setbox\\hlnormalsizeboxsinglequote=\\hbox{\\begin{scriptsize}\\verb.'.\\end{scriptsize}}%\n"
  "\\setbox\\hlnormalsizeboxbacktick=\\hbox{\\begin{scriptsize}\\verb.`.\\end{scriptsize}}%\n"
  "\\setbox\\hlnormalsizeboxhat=\\hbox{\\begin{scriptsize}\\verb.^.\\end{scriptsize}}%\n"

  "\\usepackage{multirow}\n"
  "\\usepackage{wasysym}\n"

  "\\renewenvironment{kframe}{%\n"
  " \\begin{scriptsize}\n"
  "   \\color{routput}\n"
  "   \\par\n"
  "   \\tikzexternaldisable\n"
  "     \\begin{tikzpicture}\n"
  "       \\node[fill=rbackground,rectangle,minimum width=\\textwidth] (m)\n"
  "       \\bgroup\\begin{minipage}{0.95\\textwidth}%\n"
  " }\n"
  " {%\n"
  "   \\end{minipage}\\egroup;\n"
  "   \\draw[dashed] (m.south west) rectangle (m.north east);\n"
  "   \\end{tikzpicture}\n"
  "   \\end{scriptsize}\n"
  " \\\n"
  " }\n"

"\\fi\n"

  "\\begin{document}\n"
  "\\iffinished\n"
  "\\sf\n"
  "\\AddToShipoutPicture{\\BackgroundPic}\n"
  "%\\AddToShipoutPicture{\\SidePic}\n"
  "\\AddToShipoutPicture{\\DraftWord}\n"
  "%<<Setcache - THIS CODE SHOULD BE IGNORED, echo=F>>=\n"
  "%# The following step requires the cacheSweave package\n"
  "%setCacheDir(\"cache\")\n"
  "%reSQL<-TRUE\n"
  "%@\n\n" 

  "\\lstset{basicstyle=\\small\\ttfamily,columns=fixed,numbers=left,numberstyle=\\tiny,xleftmargin=3ex,xrightmargin=3ex,frame=lines,float=htb!}\n"
  "\\fi\n"
  "\n" _ "\n\n"
  "<<Rwidth, echo=FALSE, results=\"hide\">>=\n"
  "options(width=110)\n"
  "@\n\n"
  "\\iffinished\n"
  "\\noindent\\begin{minipage}[t]{\\linewidth}{%centering\n"
  "{\\noindent\\sffamily\\bfseries\\Huge " str "\n"
  "}\\\\[1em]\n"
  "\\large{Murray Logan}\\\\ \n"
  "\\normalsize\\textit{\\today}\n"
  "\\end{minipage}\\\\ \n" 

  "\\rule{\\linewidth}{2pt}\\\\[2pt]\n"
  
  "\\titleformat{\\section}{\\Large\\sf\\bfseries\\raggedright\\color{headings}}{}{0em}{}[\\titlerule]\n"
  "\\noindent\n"
  "{\\tikzexternaldisable\n"
  "\\begin{tikzpicture}\n"
  "\\node [fill=shade,rounded corners=5pt]\n"
  "{\n"
  "\\begin{minipage}[t]{\\textwidth}\n"  
  "\\tableofcontents\n"
  "\\end{minipage}\n"
  "};\n"
  "\\end{tikzpicture}\n"
  "}\n"
  "\\titleformat{\\section}{\\Large\\sf\\bfseries\\raggedright\\color{headings}\\thesection. }{}{0em}{}[\\titlerule]\n"
  "\\fi\n"

  "\\section{Data importation and preparation}\n"
  "\\subsection{Read in data}\n"
  "<<ReadData, tidy=TRUE>>=\n"
  "#this is a comment\n"
  "a<-100\n"
  "a\n"
  "#data <- read.table('data.csv', header=T, sep=',', strip.white=T)\n"
  "@\n"
  "\\subsection{Prepare data}\n"

  "\\iffinished\n"
  "\\noindent\n"
  "{\\tikzexternaldisable\n"
  "\\begin{tikzpicture}\n"
  "\\node [fill=shade,rounded corners=5pt]\n"
  "{\n"
  "\\begin{minipage}[t]{\\textwidth}\n"  
  "\\textbf{Conclusions}.\n"
  "\\end{minipage}\n"
  "};\n"
  "\\end{tikzpicture}}\n"

  "\\addcontentsline{toc}{section}{References and additional reading}\\titleformat{\\section}{\\Large\\sf\\bfseries\\raggedright\\color{headings}}{}{0em}{}[\\titlerule]\n"
  "\\bibliographystyle{\\string~/Dropbox/Work/Resources/References/ecology}\n"
  "\\bibliography{\\string~/Dropbox/Work/References/References}\n" 
  "~\\\\[2em]\n"
  "<<sanitize, echo=F>>=\n"
  "sanitize <- function(x) gsub(\"_\",\"\\\\\\\\_\", x, fixed=TRUE)\n"
  "@\n"
  "\\addcontentsline{toc}{section}{Appendices}\n"
  "\\appendix{\\Large\\sf\\bfseries\\raggedright\\color{headings} Appendicies \\\\[0.3em]\\titlerule\\\\[0.1em]}\n"
  "\\titleformat{\\subsection}{\\large\\sf\\bfseries\\itshape\\raggedright\\color{headings}\\Alph{subsection}. }{}{0em}{}\n"
  "\\renewcommand{\\thesubsection}    {\\Alph{subsection}}\n"
  "\\subsection{Production notes}\n"
  "\\noindent This document was produced using \\LaTeX~ and \\Sexpr{print(version$version.string)} via knitr, on a system:$\\Sexpr{sanitize(version$platform)}$.\n"
  "The complete annotated R syntax is in the accompanying " name ".R file.\n"

  "%<<CreateRFile - THIS CODE SHOULD BE IGNORED, echo=FALSE>>=\n"
  "%Stangle('"name ".rnw')\n"
  "%@\n" 
  "\\fi\n"
  "\\end{document}\n")
;;------------END OF R-xelatex-----------------------------------------------------------------------------------------------------------------------------------

(define-skeleton xelatex-rnw-xtable
  "Inserts a basic R table into xelatex."
  "Table location: "
  (interactive)
  "<<hooks, echo=FALSE>>=\n"
  "old_hook <- knit_hooks$get()$chunk\n"
  "knit_hooks$set(chunk=function(x, options){x})\n"
  "@\n\n" 
  "\\begin{table}[" str "]\n"
  "\\sf\n"
  "\\caption{" (setq v1 (skeleton-read "Caption? ")) "}\\label{tab:"  (setq v2 (skeleton-read "label? ")) "}\n"
  "\\begin{tabularx}{\\linewidth}{xll}\n"
  "\\hline\n"
  "\\textbf{A}&\\textbf{B}&\\textbf{C}\\\\\n"
  "\\hline\n"
  "<<Name, echo=F, results=tex>>=\n"
  "print(xtable(" (setq v3 (skeleton-read "tab? ")) ",digits=c(0,4,0)),NA.string='NA',hline.after=NULL,include.rownames=F,floating=FALSE,only.contents=T,include.colnames=F,sanitize.text.function=function(x) x, sanitize.rownames.function=function(x) x)\n"
  "@\n"
  "\\hline\n"
  "\\end{tabularx}\n"
  "\\end{table}\n"
  "<<restore_hooks, echo=FALSE>>=\n"
  "knit_hooks$set(chunk=old_hook)\n"
  "@\n"
)

(define-skeleton xelatex-color-table
  "Inserts a color table into xelatex."
  "Table location: "
  (interactive)
  "\\arrayrulecolor{orangeColor}\n"
  "\\rowcolors[\\hline]{3}{orangeColor!15}{white}\n"
  "\\begin{table}[hptb]\n"
  "  \\begin{minipage}[h]{1.0\\linewidth}\n"
  "    \\begin{tabularx}{\\linewidth}{|Xlclllccc|}\n"
  "      \\hline\n"
  "      \\rowcolor{orangeColor}&&&&&&\\textcolor{white}{\\textbf{Enrol.}}&\\textcolor{white}{\\textbf{Enrol. per}}&\n"
  "      \\textcolor{white}{\\textbf{Enrol. per}}\\\\\n"
  "      \\rowcolor{orangeColor}\\textcolor{white}{\\textbf{Faculty}}&\n"
  "      \\textcolor{white}{\\textbf{Unit}}&\n"
  "      \\textcolor{white}{\\textbf{Sem.}}&\n"
  "      \\textcolor{white}{\\textbf{Campus}\\footnote{B=Berwick, CA=Caulfield, CL=Clayton, G=Gippsland, M=Malaysia, P=Peninsula, S=South Africa}}&\n"
  "      \\textcolor{white}{\\textbf{LMS 2011}}&\n"
  "      \\textcolor{white}{\\textbf{LMS 2012}}&\n"
  "      \\textcolor{white}{\\textbf{range\\footnote{Range of enrollment sizes across the campuses and years}}}&\n"
  "      \\textcolor{white}{\\textbf{campus\\footnote{Mean enrollment size per campus/year}}}&\n"
  "      \\textcolor{white}{\\textbf{year\\footnote{The mean of the total enrollment across all campuses per year}}}\\\\\n"
  "      \\hline\n"
  "      Arts&ATS1325&1&B,CA,CL,M,S&Blackboard&Blackboard&18-283&137.6&619.0\\\\\n"
  "      Arts&ATS1328&1&CA,M,S&Blackboard&Blackboard&34-165&80.7&242.0\\\\\n"
  "      Arts&ATS1365&1&CA,CL,S&Blackboard&Blackboard&94-200&125.0&376.5\\\\\n"
  "      Arts&ATS1371&1&CA,CL,S&Blackboard&Moodle&39-192&94.5&283.5\\\\\n"
  "      Buseco&AFW1002&2&B,G,M,P,S&Blackboard&Blackboard&2-210&78.2&391.0\\\\\n"
  "      Buseco&ECW1102&2&B,G,M,P,S&Blackboard&Blackboard&8-208&101.1&455.0\\\\\n"
  "      Buseco&ETC1000&1&CL,M&Blackboard&Blackboard&9-484&244.3&488.5\\\\      \n"
  "      Buseco&MGW1010&1&B,G,M,P,S&Blackboard&Blackboard&29-400&177.7&799.5\\\\  \n"
  "      Edu&EDF1303&1&B,CL,G,P&Blackboard&Blackboard&33-99&73.6&257.5\\\\\n"
  "      Edu&EDF1305&1&G,P&Blackboard&Blackboard&35-47&42.0&84.0\\\\\n"
  "      \\hline\n"
  "    \\end{tabularx}\n"
  "  \\end{minipage}\n"
  "  \\caption{Basic enrollment characteristics of the units selected as data for the learning analytics prototype.}\n"
  "  \\label{tab:unitSelections}\n"
"\\end{table}\n"
"}\n"
)

(define-skeleton xelatex-sideways-table
  "Inserts a color table into xelatex."
  "Table location: "
  (interactive)
  "<<hooks, echo=FALSE>>=\n"
  "old_hook <- knit_hooks$get()$chunk\n"
  "knit_hooks$set(chunk=function(x, options){x})\n"
  "@\n"  
  "\\begin{sidewaystable}[htbp]\n"
  "\\sf\n"
  "\\caption{Estimated mean (95\\% HPS interval) DAS (Depression, Anxiety and Stress) scores associated with survery 1 and 2 (semester 1 and 2 respectively) along with the pairwise mean difference (Effect) and percentage effect (Effect expressed as a percentage of survey 1 score).  The probability that the percent effect is greater than 0, 5\\% and 10\\% are also included. Median and percentage finite-population variance components (in standard deviation units) are provided for the levels of Student, Survey and Residuals.}\\label{tab:aa}\n"
  "\\begin{tabularx}{\\linewidth}{X@{\\extracolsep{0.5em}}\n"
  "    c@{\\extracolsep{1em}}l@{\\extracolsep{0.5em}}l@{\\extracolsep{0.5em}}l@{\\extracolsep{1em}}\n"
  "    c@{\\extracolsep{1em}}l@{\\extracolsep{0.5em}}l@{\\extracolsep{0.5em}}l@{\\extracolsep{1em}}\n"
  "    c@{\\extracolsep{1em}}l@{\\extracolsep{0.5em}}l@{\\extracolsep{0.5em}}l@{\\extracolsep{0.5em}}}\n"
  "\\toprule\n"
  "&\\multicolumn{4}{c}{\\textbf{Depression}}&\\multicolumn{4}{c}{\\textbf{Anxiety}}&\\multicolumn{4}{c}{\\textbf{Stress}}\\\\\n"
  "\\cmidrule(c){2-5}\\cmidrule(c){6-9}\\cmidrule(c){10-13}\n"
  "&\\textbf{Mean}&\\multicolumn{3}{c}{\\textbf{Prob. increase}}&\\textbf{Mean}&\\multicolumn{3}{c}{\\textbf{Prob. increase}}&\\textbf{Mean}&\\multicolumn{3}{c}{\\textbf{Prob. increase}}\\\\\n"
  "\\cmidrule(c){3-5}\\cmidrule(c){7-9}\\cmidrule(c){11-13}\n"
  "\\textbf{Source}&\\textbf{(95\\% HPD)}&\\textbf{>0\\%}&\\textbf{>5\\%}&\\textbf{>10\\%}&\\textbf{(95\\% HPD)}&\\textbf{>0\\%}&\\textbf{>5\\%}&\\textbf{>10\\%}&\\textbf{(95\\% HPD)}&\\textbf{>0\\%}&\\textbf{>5\\%}&\\textbf{>10\\%}\\\\\n"
  "\\midrule \n"
  "<<JAGStable, echo=FALSE, results='asis'>>=\n"
  "library(xtable)\n"
  "#prepare\n"
  "sum.D$HPD <- sprintf(\"%6.2f (%6.2f - %6.2f)\",sum.D$mean,sum.D$lower.1, sum.D$upper.1)\n"
  "sum.A$HPD <- sprintf(\"%6.2f (%6.2f - %6.2f)\",sum.A$mean,sum.A$lower.1, sum.A$upper.1)\n"
  "sum.S$HPD <- sprintf(\"%6.2f (%6.2f - %6.2f)\",sum.S$mean,sum.S$lower.1, sum.S$upper.1)\n"
  "sums <- cbind(sum.D[,c(4,8,5:7)],sum.A[,c(8,5:7)],sum.S[,c(8,5:7)])\n"
  "print(xtable(sums,digits=c(0,0,0,rep(2,3),0,rep(2,3),0,rep(2,3))),NA.string='',hline.after=NULL,include.rownames=F,floating=FALSE,only.contents=T,include.colnames=F,sanitize.text.function=function(x) x, sanitize.rownames.function=function(x) x)\n"
  "@\n"
  "\\midrule\n"
  "&\\multicolumn{2}{c}{\\textbf{Var. comp.}}&&&\\multicolumn{2}{c}{\\textbf{Var. comp.}}&&&\\multicolumn{2}{c}{\\textbf{Var. comp.}}&&\\\\\n"
  "\\cmidrule(c){2-3}\\cmidrule(c){6-7}\\cmidrule(c){10-11}\n"
  "&\\textbf{Median}&\\textbf{\\%}&&&\\textbf{Median}&\\textbf{\\%}&&&\\textbf{Median}&\\textbf{\\%}&&\\\\\n"
  "%\\multicolumn{3}{l}{\\textsl{Variance components (sd)}}\\\\\n"
  "<<JAGStable2, echo=FALSE, results='asis'>>=\n"
  "library(xtable)\n"
  "#prepare\n"
  "sd.D$HPD <- sprintf(\"%6.2f (%6.2f - %6.2f)\",sd.D$median,sd.D$lower.1, sd.D$upper.1)\n"
  "sd.A$HPD <- sprintf(\"%6.2f (%6.2f - %6.2f)\",sd.A$median,sd.A$lower.1, sd.A$upper.1)\n"
  "sd.S$HPD <- sprintf(\"%6.2f (%6.2f - %6.2f)\",sd.S$median,sd.S$lower.1, sd.S$upper.1)\n"
  "sds <- cbind(sd.D[,c(5,6,4)],matrix(rep(NA,6),ncol=2),sd.A[,c(6,4)],matrix(rep(NA,6),ncol=2),sd.S[,c(6,4)],matrix(rep(NA,6),ncol=2))\n"
  "print(xtable(sds,digits=c(0,0,0,rep(2,3),0,rep(2,3),0,rep(2,3))),NA.string='',hline.after=NULL,include.rownames=F,floating=FALSE,only.contents=T,include.colnames=F,sanitize.text.function=function(x) x, sanitize.rownames.function=function(x) x)\n"
  "@\n"
  "\\bottomrule\n"
  "\\end{tabularx}\n"
  "\\end{sidewaystable}\n"
  "<<restore_hooks, echo=FALSE>>=\n"
  "knit_hooks$set(chunk=old_hook)\n"
  "@\n" 
)
#+end_src
*** NAS music
#+begin_src emacs-lisp
;; load-nas-music
;; -------------------
;; Create a playlist from the MBW network drive 
;; Bind it to C-c C-n
(defun load-nas-music ()
  "Create a playlist from the MBW network drive."
  (interactive)
    (emms-add-directory-tree "/mnt/MBWpublic/Shared Music/Music")
  )
 (define-key global-map [(control c) (control n)] 'load-nas-music) ; Bind to C-c C-n

(defun load-local-music ()
  "Create a playlist from the local drive."
  (interactive)
    (emms-add-directory-tree "~/music")
  )
 (define-key global-map [(control c) (control m)] 'load-local-music) ; Bind to C-c C-m
#+end_src

** Menu
#+begin_src emacs-lisp
(let ((menu '("Murray"
           ("Files"
			["notes.org" ml-load-files-notes]
			["AIMS.org" ml-load-files-AIMS]
			["references.org" ml-load-files-references]
			["References.bib" ml-load-files-bib]
			["init.el" ml-load-files-init]
		   )
           ("Mounting"
            ["mount MBWpublic" (shell-command (concat "echo " (shell-quote-argument (read-passwd "Password? "))" | sudo mount -t cifs //192.168.1.2/Public /mnt/MBWpublic -o user=murray,password=merycism,uid=1000"))]
            ["umount MBWpublic" (shell-command (concat "echo " (shell-quote-argument (read-passwd "Password? "))" | sudo -S umount /mnt/MBWpublic"))]
            ["mount MBWmurray" (shell-command (concat "echo " (shell-quote-argument (read-passwd "Password? "))" | sudo -S mount -t cifs //192.168.1.2/Murray /mnt/MBWmurray -o user=murray,password=merycism,uid=1000"))]
            ["umount MBWmurray" (shell-command (concat "echo " (shell-quote-argument (read-passwd "Password? "))" | sudo -S umount /mnt/MBWmurray"))]
            ["AIMS vpn" (shell-command (concat "echo " (shell-quote-argument (read-passwd "Password? "))" | sudo -S vpnc AIMS.conf"))]
            )
            ("Text file editing"
	       ["Strip Trailing" strip-trailing-space]
	       ["Goto Longest Line" goto-longest-line]
	       )
            ["Show keys" ml-show-mkeys]
            ["Goto Matching Paren" goto-matching-paren]
            ["Speedbar" speedbar]
            ("R, LaTeX and HTML"
		   ["small-markdown-knitr-pandoc" small-markdown-knitr-pandoc]
		   ["large-markdown-knitr-pandoc" large-markdown-knitr-pandoc]
		   ["elsarticle-R" elsarticle-R]
		   ["knitr-xelatex" knitr-xelatex]
	       ["R-xelatex" R-xelatex]
		   ("Tables"
		   	["xtable" xelatex-rnw-xtable]
		   	["color-table" xelatex-color-table]
		   	["color-table" xelatex-sideways-table]
		   	)
		   )
		  ("Music"
		   ["Load NAS music" load-nas-music]
		   ["Load local music" load-local-music]
		   ;;["Volume down" emms-volume-lower]
		   ;;["Volume up" emms-volume-raise]
		   ["Pause" emms-pause]
		   )
           )))

  (if (fboundp 'add-submenu)
      (add-submenu nil menu)
    (require 'easymenu)
    (easy-menu-define -menu global-map "Murray's Personal Menu" menu)
    (easy-menu-add murrays-menu global-map)))
#+end_src
* Window moves
** Move between windows
#+begin_src emacs-lisp
(windmove-default-keybindings 'meta)
(global-set-key [M-up] 'windmove-up)
(global-set-key [M-down] 'windmove-down)
(global-set-key [M-left] 'windmove-left)
(global-set-key [M-right] 'windmove-right)
#+end_src
** Resize windows
#+begin_src emacs-lisp
(global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "S-C-<up>") 'shrink-window)
(global-set-key (kbd "S-C-<down>") 'enlarge-window)
#+end_src
** Scroll smoothly
#+begin_src emacs-lisp
(setq scroll-conservatively most-positive-fixnum) 
(setq scroll-step 1)		
#+end_src
* File associations
** Mode hooks
#+begin_src emacs-lisp
;============================================================
;; File associations
;;============================================================
(setq auto-mode-alist
      (append '(("\\.C$"     . c++-mode)
                ("\\.cc$"    . c++-mode)
                ("\\.cpp$"   . c++-mode)
                ("\\.cxx$"   . c++-mode)
                ("\\.hxx$"   . c++-mode)
                ("\\.h$"     . c++-mode)
                ("\\.hh$"    . c++-mode)
                ("\\.idl$"   . c++-mode)
                ("\\.c$"     . c-mode)
                ("\\.cg$"    . c-mode)    ; nvidia cg
                ("\\.pl$"    . perl-mode)
                ("\\.pm$"    . perl-mode)
                ("\\.java$"  . java-mode)
                ("\\.m$"     . octave-mode)
                ("\\.org$"    . org-mode)
                ("\\.html$"  . html-mode)
				("\\.Rhtml$"  . html-mode)
                ("\\.htm$"   . html-mode)
                ("\\.xml$"   . sgml-mode)
                ("\\.R$"     . r-mode)
                ("\\.r$"     . r-mode)
                ("\\.log$"   . text-mode)
                ("\\.sty$"   . latex-mode)
                ("\\.tex$"   . latex-mode)
                ("\\.latex$" . latex-mode)
                ("\\.diff$"  . diff-mode)
				("\\.rnw$"   . noweb-mode)
				("\\.Rmd$"   . markdown-mode)
				("\\.sc$"  . c++-mode)
		;;("\\.emacs"  . emacs-list-mode)
                ("\\.patch$" . diff-mode))
              auto-mode-alist))
;;============================================================
#+end_src
** External locations
#+begin_src emacs-lisp
(setq browse-url-generic-program (executable-find "conkeror"))
(setq browse-url-browser-function 'browse-url-generic)
#+end_src
* Org stuff
** Org directory
#+begin_src emacs-lisp
(setq org-directory "~/")
#+end_src
** Define which languages work with org-mode for tangling etc
#+begin_src emacs-lisp
(defun R-org-confirm-babel-evaluate (lang body)
  (not (string= lang "R")))
(setq org-confirm-babel-evaluate 'R-org-confirm-babel-evaluate)

(defun R-org-confirm-babel-evaluate (lang body)
  (not (string= lang "R")))
(setq org-confirm-babel-evaluate 'R-org-confirm-babel-evaluate)
#+end_src
** Exporting
#+begin_src emacs-lisp
(custom-set-variables
 '(org-export-html-extension "html")
 '(org-export-html-postamble-format (quote (("en" ""))))
 '(org-export-html-preamble "")
 '(org-export-htmlize-output-type (quote css))
)
#+end_src
** Agenda
*** Setup
#+begin_src emacs-lisp
(global-set-key (kbd "C-c a") 'org-agenda)

;; Targets include this file and any file contributing to the agenda - up to 9 levels deep
(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9))))
#+end_src
*** Options
#+begin_src emacs-lisp
;open agenda in current window
(setq org-agenda-window-setup (quote current-window))
;;warn me of any deadlines in next 7 days
(setq org-deadline-warning-days 7)
;;show me tasks scheduled or due in next fortnight
(setq org-agenda-span (quote fortnight))
;;don't show tasks as scheduled if they are already shown as a deadline
(setq org-agenda-skip-scheduled-if-deadline-is-shown t)
;;don't give awarning colour to tasks with impending deadlines
;;if they are scheduled to be done
(setq org-agenda-skip-deadline-prewarning-if-scheduled (quote pre-scheduled))
;;don't show tasks that are scheduled or have deadlines in the
;;normal todo list
(setq org-agenda-todo-ignore-deadlines (quote all))
(setq org-agenda-todo-ignore-scheduled (quote all))
;;sort tasks in order of when they are due and then by priority
(setq org-agenda-sorting-strategy
  (quote
   ((agenda deadline-up priority-down)
    (todo priority-down category-keep)
    (tags priority-down category-keep)
    (search category-keep))))

(setq 
 org-agenda-clockreport-parameter-plist '(:link t :maxlevel 3 :step week :fileskip0 t :formula % "$6='(org-clock-time% @2$2 $2..$5);%.1f")
 org-time-clocksum-format '(:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t)
 org-agenda-start-with-clockreport-mode t
 org-agenda-start-with-log-mode t
 ;;org-agenda-start-with-follow-mode f
)
#+end_src
** Diary mode - fancy display
#+begin_src emacs-lisp
;;============================================================
;; Diary mode - fancy display
;;============================================================
;;Here is some code to make your calendar and diary display fancier:
(setq view-diary-entries-initially t
       mark-diary-entries-in-calendar t
       number-of-diary-entries 7)
 (add-hook 'diary-display-hook 'fancy-diary-display)
 (add-hook 'today-visible-calendar-hook 'calendar-mark-today)
(setq diary-file "~/Dropbox/org/diary")
#+end_src
** TODO lists - organizing thoughts
#+begin_src emacs-lisp
;;============================================================
;; Org mode - organizing thoughts, TODO's etc
;;============================================================
;; Making good use of org-mode
;; The following lines are always needed.  Choose your own keys.
;;     (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
     (define-key global-map "\C-cl" 'org-store-link)
     (define-key global-map "\C-ca" 'org-agenda)
(setq org-agenda-files (list "~/org/work.org"
			     "~/org/gtd.org"
	                     "~/org/stats.org"
                             "~//org/AIMS.org"
                             "~/org/todo.org"
                             "~/org/book.org"
                             "~/org/sandpit.org"
			     "~/org/webdev.org"
			     "~/org/magneticIsland.org"
                             "~/org/home.org"))
;; The following makes it so that the diary file is included in the agenda mode
(setq org-agenda-include-diary t)

;; (setq org-todo-keyword-faces
;;       (quote (("TODO"      :foreground "red"          :weight bold)
;;               ("NEXT"      :foreground "blue"         :weight bold)
;;               ("DONE"      :foreground "forest green" :weight bold)
;;               ("WAITING"   :foreground "yellow"       :weight bold)
;;               ("SOMEDAY"   :foreground "goldenrod"    :weight bold)
;;               ("CANCELLED" :foreground "orangered"    :weight bold)
;;               ("QUOTE"     :foreground "hotpink"      :weight bold)
;;               ("QUOTED"    :foreground "indianred1"   :weight bold)
;;               ("APPROVED"  :foreground "forest green" :weight bold)
;;               ("EXPIRED"   :foreground "olivedrab1"   :weight bold)
;;               ("REJECTED"  :foreground "olivedrab"    :weight bold)
;;               ("OPEN"      :foreground "magenta"      :weight bold)
;;               ("CLOSED"    :foreground "forest green" :weight bold))))
#+end_src
** Bibliography
#+begin_src emacs-lisp
(defun org-mode-reftex-search ()
  ;;jump to the notes for the paper pointed to at from reftex search
  (interactive)
  (org-open-link-from-string (format "[[notes:%s]]" (reftex-citation t))))

(defun org-mode-reftex-setup ()
  (load-library "reftex")
  (and (buffer-file-name) (file-exists-p (buffer-file-name))
       (progn
	 ;enable auto-revert-mode to update reftex when bibtex file changes on disk
	 (global-auto-revert-mode t)
	 (reftex-parse-all)
	 ;add a custom reftex cite format to insert links
	 (reftex-set-cite-format
	  '((?b . "[[bib:%l][%l-bib]]")
	    (?n . "[[notes:%l][%l-notes]]")
	    (?p . "[[papers:%l][%l-paper]]")
	    (?t . "%t")
	    (?h . "** %2a (%y). %t\n\t:PROPERTIES:\n\t:Custom_ID: %l\n\t:END:\n\t[[bib:%l][%l-bib]]\n\t[[papers:%l][%l-paper]]")))))
  (define-key org-mode-map (kbd "C-c )") 'reftex-citation)
  (define-key org-mode-map (kbd "C-c (") 'org-mode-reftex-search))

(add-hook 'org-mode-hook 'org-mode-reftex-setup)

(setq org-link-abbrev-alist
      '(("bib" . "~/Dropbox/Work/Resources/References/References.bib::%s")
	("notes" . "~/org/references.org::#%s")
	("papers" . "~/Dropbox/Work/Resources/References/Papers/%s.pdf")))

#+end_src
** PDFs
#+begin_src emacs-lisp
;; PDFs visited in Org-mode are opened in pdfview (or Evince which is commented out) (and not in the default choice) http://stackoverflow.com/a/8836108/789593
(add-hook 'org-mode-hook
      '(lambda ()
         (delete '("\\.pdf\\'" . default) org-file-apps)
         (add-to-list 'org-file-apps '("\\.pdf\\'" . org-pdfview-open)))
         ;;(add-to-list 'org-file-apps '("\\.pdf\\'" . "evince %s")))
		 )
#+end_src
** Capture (used to be remember mode)
#+begin_src emacs-lisp
(define-key global-map (kbd "C-c c") 'org-capture)
(setq org-capture-templates
      '(("t" "todo" entry (file+headline "~/org/todo.org" "Tasks")
         "* TODO [#A] %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n")))
(setq org-default-notes-file (concat org-directory "/gtd.org"))

;; Bind Org Capture to C-c r
(global-set-key "\C-cr" 'org-capture)

(setq org-capture-templates
      '(("t" "Todo heading" entry (file+headline (concat org-directory "/gtd.org") "Tasks")
         "* TODO %?\t%T\t%^G\n\t%a\t")
		("i" "Todo item" checkitem (file+headline (concat org-directory "/gtd.org") "TODO")
         "[] %?\t%T\n\t%a\t")
		("p" "Project item" entry (file+headline (concat org-directory "/gtd.org") "Projects")
         "* %?\t%^G\t%T\n\t%a\t")
		("c" "Calendar" entry (file+headline (concat org-directory "/gtd.org") "Calendar")
         "* %?\n\t")
        ("l" "Link" plain (file (concat org-directory "/AIMS.org"))
         "- %?\n %x\n")))
#+end_src
** Remember mode
#+begin_src emacs-lisp

#+end_src
** 
* ESS
#+begin_src emacs-lisp
(use-package ess-site
   :ensure ess)
;;   :mode ("\\.R\\'" . R-mode))
#+end_src
** R specific
*** Define some functions
#+begin_src emacs-lisp
;ESS for Sweave files
(defun Rnw-mode ()
       (require 'ess-noweb)
       (noweb-mode)
       (if (fboundp 'R-mode)
          (setq noweb-default-code-mode 'R-mode)))
     (add-to-list 'auto-mode-alist '("\\.rnw\\'" . Rnw-mode))
     (add-to-list 'auto-mode-alist '("\\.Snw\\'" . Rnw-mode))
     (setq reftex-file-extensions
          '(("Snw" "rnw" "nw" "tex" ".tex" ".ltx") ("bib" ".bib")))
     (setq TeX-file-extensions
          '("Snw" "rnw" "nw" "tex" "sty" "cls" "ltx" "texi" "texinfo"))

(defun my-ess-start-R ()
    (interactive)
    (if (not (member "*R*" (mapcar (function buffer-name) (buffer-list))))
      (progn
	(delete-other-windows)
	(setq w1 (selected-window))
	(setq w1name (buffer-name))
	(setq w2 (split-window w1))
	(R)
	(set-window-buffer w2 "*R*")
	(set-window-buffer w1 w1name))))

(defun eval-chunk ()
  "This function marks and evaluates the current chunk"
  (interactive)
  ;; Get the current point
  (setq pCurrent (point))
  ;; Go back to chunk header
  (re-search-backward "^```.*") (forward-line 1) (setq p1 (point))
  (re-search-forward "^```") (forward-line -1) (setq p2 (line-end-position))
  (ess-eval-region p1 p2 nil)
  (goto-char pCurrent)
)


(defun eval-allAbove-R-regionsNoweb ()
  "This function evaluates all R code within babel R tags above the current point"
  (interactive)
  (setq p3 (point))
  ;; first work out if R is running and if not start it up in an inferior window
  (my-ess-start-R)
  (let ((total 0)(counti 1))
	(setq p3 (point))
	(setq p1 (point))
	(beginning-of-buffer)
	(while (<= (point) p3)
	  (re-search-forward "^<<.*>>=") (setq p1 (point))
	  ;;(re-search-forward "R") (setq p1 (point))
	  (if (< p3 p1) ()
		(re-search-forward "@") (re-search-backward "@") (setq p2 (point)) 
		(setq counti (point))
		(ess-eval-region p1 p2 nil)
		;;(message "this is %d" p1)	
		;;(message "Original is %d" p3)
		)
	  )
	total
	)
  (goto-char p3)
  )

#+end_src
*** Key maps and configurations
#+begin_src emacs-lisp
;;(global-set-key [f2] 'ess-eval-line-and-step)
(add-hook 'ess-mode-hook
          (lambda ()
           (define-key ess-mode-map [f2] 'ess-eval-line-and-step)
           (define-key ess-mode-map [f8] 'eval-allAbove-R-regionsNoweb)
))
(setq ess-ask-for-ess-directory nil)
(setq ess-local-process-name "R")
(setq ansi-color-for-comint-mode 'filter)
#+end_src
*** Rnd font lock (colors etc)
#+begin_src emacs-lisp
;; The following is modified from noweb-font-lock-mode.el
;; so that we can highlight the R snippets within the rnw file
(defface noweb-font-lock-code-chunk-face
  '((t (:family "Inconsolata" :background "#FFFFCC")))
  "Face to highlight noweb code chunks")
(defface R-font-lock-doc-chunk-face
  '((t (:family "Inconsolata" :background "#FFFFCC")))
  "Face to highlight noweb doc chunks")
(defvar R-font-lock-code-chunk-face 'R-font-lock-code-chunk-face
  "Face to use to highlight the first line of each code chunk (i.e. <<>>=)")
(defvar R-font-lock-doc-chunk-face 'R-font-lock-doc-chunk-face
  "Face to use to highlight the first line of each doc chunk (i.e. @)")

(defface R-font-lock-code-chunk-face
  '((t (:family "Inconsolata" :background "#FFFFCC")))
  "Face to highlight noweb code chunks")
(defvar R-font-lock-code-chunk-face 'R-font-lock-code-chunk-face
  "Face to use to highlight the first line of each code chunk (i.e. <<>>=)")


(defun noweb-font-lock-fontify-chunk-by-number ( chunk-num )
  "Fontify chunk chunk-num based on the current major mode."
  (save-excursion
    (font-lock-set-defaults)
    (setq old-beginning-of-syntax font-lock-beginning-of-syntax-function)
    (setq font-lock-beginning-of-syntax-function 'noweb-start-of-syntax)
    (setq font-lock-keywords
	  (append font-lock-keywords
		  '(
			("\\(\\[\\[\\)\\([^]]*\\]*\\)\\(\\]\\]\\|\\$\\)"
		     (1 font-lock-reference-face prepend )
		     (2 font-lock-keyword-face prepend)
		     (3 font-lock-reference-face prepend))
			("^[ \t\n]*<<\\([^>]+\\)>>"        ;; reuse code chunk
			 (1 font-lock-keyword-face  prepend ))
			("^\\(<<\\)\\([^>]*\\)\\(>>=\\)\\(\\(?:[\t][^\n]*\\)?\\)[\n]" ;; code chunk start
			 (0 R-font-lock-code-chunk-face prepend )
		     (1 font-lock-reference-face  prepend )
		     (2 font-lock-keyword-face prepend)
		     (3 font-lock-reference-face prepend)
			 (4 font-lock-comment-face prepend))
			("^@\\(\\(?:[ \t][^\n]*\\)?\\)[\n]" ;; doc chunk start
		     (0 font-lock-reference-face prepend )
			 (0 R-font-lock-doc-chunk-face prepend )
			 (1 font-lock-comment-face prepend)
			 )
			;; ("^<<.*>>=.|\n]*"        ;; reuse code chunk
			;;  (0 R-font-lock-code-chunk-face prepend ))
			)
		  )
	  )
    (let ((r (cons (marker-position (cdr (aref noweb-chunk-vector
					       chunk-num)))
		   (marker-position (cdr (aref noweb-chunk-vector
					       (1+ chunk-num)))))))
      (font-lock-fontify-region (car r) (cdr r))
      t)))
;;End of the R highlighting stuff
#+end_src
*** Help buffers
    If you want all help buffers to go into one frame 
#+begin_src emacs-lisp
(setq ess-help-own-frame 'one)
(defun my-rdired-View (objname)
  "View an object in its own buffer. Similar to `ess-rdired-View', but my taste."
  (interactive "sEnter object name: ")
  (ess-command "tmpwidth <- options('width')[[1]]\n")
  (ess-command "options(width=9999)\n")
  (ess-execute objname nil (concat "R view " objname ))
  (ess-command "options(width=tmpwidth)\n")
  (switch-to-buffer (concat "*R view " objname "*"))
  (toggle-truncate-lines 1))
#+end_src
*** Autoloaders
#+begin_src emacs-lisp
(use-package markdown-mode
    :ensure t)

(autoload 'markdown-mode "markdown-mode" "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist'("\\.text" . markdown-mode))
(add-to-list 'auto-mode-alist'("\\.markdown" . markdown-mode))
(add-to-list 'auto-mode-alist'("\\.md" . markdown-mode))

(add-hook 'markdown-mode-hook 'turn-on-orgtbl)
#+end_src
*** Polymode
#+begin_src emacs-lisp
(use-package poly-R
   :ensure polymode
)
(use-package poly-markdown
   :ensure polymode
)
(add-to-list 'auto-mode-alist'("\\.Rmd" . poly-markdown+r-mode))
#+end_src
* Rebox2
#+begin_src emacs-lisp
(use-package rebox2
   :ensure t
   :config
   (add-hook 'R-mode-hook (lambda() (rebox-mode 1)))
   :bind
   ("M-q" . rebox-dwin-fill)
)

(add-hook 'R-mode-hook (lambda() (rebox-mode 1)))
#+end_src
* Hydra
#+begin_src emacs-lisp
;; This is inspired by https://github.com/joedicastro/dotfiles/tree/master/emacs

(require 'bind-key)



(defun joe-alternate-buffers ()
  "Toggle between the last two buffers"
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) t)))

(defun joe-revert-buffer ()
  "Revert the buffer to the save disk file state"
  (interactive)
  (revert-buffer nil t))

(defun joe-kill-this-buffer ()
  "Kill the current buffer"
  (interactive)
  (kill-buffer (current-buffer)))

(defun joe-diff-buffer-with-file ()
  "Compare the current modified buffer with the saved version."
  (interactive)
  (let ((diff-switches "-u"))
    (diff-buffer-with-file (current-buffer))))

(use-package hydra
  :ensure t
  :defer 0.1
  :init
  (bind-key "\;" 'hydra-master/body)
  :config
  (setq lv-use-separator t)
  (set-face-attribute 'hydra-face-blue nil :foreground "deep sky blue" :weight 'bold)

  (eval-and-compile
    (defhydra hydra-common (:color blue)
      ("<ESC>" nil "quit")))

  (defhydra hydra-master (:color blue :idle 0.4)
    "
                                                                       ╭───────┐
                                                                       │ Index │
╭──────────────────────────────────────────────────────────────────────┴───────╯
  [_a_] bookmarks    [^h^] hide/show     [_o_] organization  [_v_] games
  [_b_] buffers      [_i_] internet      [_p_] pdf           [_w_] window
  [_c_] flycheck     [_j_] jump          [_q_] exit          [_x_] shell
  [_d_] development  [_k_] spell         [_r_] R             [^y^]
  [_e_] emacs        [_l_] lisp          [_s_] search        [^z^] register
  [_f_] file         [_m_] media         [_t_] text
  [_g_] git          [_n_] narrow        [^u^] R/latex/pandoc projects
--------------------------------------------------------------------------------
    "
    ("<SPC>" joe-alternate-buffers "alternate buffers")
    ("<ESC>" nil "quit")
    ("\;" (insert "\;") "\\")
    ("a"     hydra-bookmarks/body nil)
    ("b"     hydra-buffers/body nil)
    ("c"     hydra-flycheck/body nil)
    ("d"     hydra-development/body nil)
    ("e"     hydra-emacs/body nil)
    ("f"     hydra-file/body nil)
    ("g"     hydra-git/body nil)
	("h"     hydra-outline/body nil)
    ("i"     hydra-internet/body nil)
    ("j"     hydra-jump/body nil)
    ("k"     hydra-spell/body nil)
    ("l"     hydra-lisp/body nil)
    ("m"     hydra-media/body nil)
    ("n"     hydra-narrow/body nil)
    ("o"     hydra-organization/body nil)
    ("p"     hydra-pdf/body nil)
    ("q"     hydra-exit/body nil)
    ("z"     hydra-register/body nil)
	("r"     hydra-R/body nil)
    ("s"     hydra-search/body nil)
    ("t"     hydra-text/body nil)
	("u"     hydra-RlatexPandoc/body nil)
    ("v"     hydra-games/body nil)
    ("w"     ace-window nil)
    ("x"     hydra-system/body nil))

  (defhydra hydra-masterOld (:color blue :idle 0.4)
    "
                                                                       ╭───────┐
                                                                       │ Index │
╭──────────────────────────────────────────────────────────────────────┴───────╯
  [_a_] bookmarks    [^h^]               [_o_] organization  [_v_] games
  [_b_] buffers      [_i_] internet      [_p_] project       [_w_] window
  [_c_] flycheck     [_j_] jump          [_q_] exit          [_x_] shell
  [_d_] development  [_k_] spell         [_r_] register      [^y^]
  [_e_] emacs        [_l_] lisp          [_s_] search        [^z^]
  [_f_] file         [_m_] media         [_t_] text
  [_g_] git          [_n_] narrow        [^u^] 
--------------------------------------------------------------------------------
    "
    ("<SPC>" joe-alternate-buffers "alternate buffers")
    ("<ESC>" nil "quit")
    ("\;" (insert "\;") "\\")
    ("a"     hydra-bookmarks/body nil)
    ("b"     hydra-buffers/body nil)
    ("c"     hydra-flycheck/body nil)
    ("d"     hydra-development/body nil)
    ("e"     hydra-emacs/body nil)
    ("f"     hydra-file/body nil)
    ("g"     hydra-git/body nil)
    ("i"     hydra-internet/body nil)
    ("j"     hydra-jump/body nil)
    ("k"     hydra-spell/body nil)
    ("l"     hydra-lisp/body nil)
    ("m"     hydra-media/body nil)
    ("n"     hydra-narrow/body nil)
    ("o"     hydra-organization/body nil)
    ("p"     hydra-project/body nil)  ;this uses projectile
    ("q"     hydra-exit/body nil)
    ("r"     hydra-register/body nil)
    ("s"     hydra-search/body nil)
    ("t"     hydra-text/body nil)
    ("v"     hydra-games/body nil)
    ("w"     ace-window nil)
    ("x"     hydra-system/body nil))

  (defhydra hydra-bookmarks (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
    "
                                                                   ╭───────────┐
       List                          Do                            │ Bookmarks │
╭──────────────────────────────────────────────────────────────────┴───────────╯
  [_h_] list bookmarks (helm)     [_j_] jump to a bookmark
  [_l_] list bookmarks            [_m_] set bookmark at point
  ^ ^                             [_s_] save bookmarks
--------------------------------------------------------------------------------
    "
    ("h" helm-bookmarks)
    ("j" bookmark-jump)
    ("l" list-bookmarks)
    ("m" bookmark-set)
    ("s" bookmark-save))

    (defhydra hydra-outline (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
    "
                                                                   ╭───────────┐
       Minor mode            Hide/show                        Move │ Outline   │
╭──────────────────────────────────────────────────────────────────┴───────────╯
  [_o_] outline minor mode   [_h_] hide more <C-S-left>       [_u_] move up <C-S-up>
  [_a_] show all             [_s_] show more <C-S-right>      [_d_] move down <C-S-down>
  [_l_] hide all             [_t_] toggle children <C-tab>
--------------------------------------------------------------------------------
    "
    ("o" outline-minor-mode)
    ("a" outline-show-all)
	("l" hide-body)
    ("h" outline-hide-more)
    ("s" outline-show-more)
    ("t" outline-toggle-children)
	("u" outline-previous-visible-heading)
	("d" outline-next-visible-heading))

  (defhydra hydra-buffers (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
    "
                                                                     ╭─────────┐
  Switch                 Do                                          │ Buffers │
╭────────────────────────────────────────────────────────────────────┴─────────╯
  [_b_] switch (ido)       [_k_] kill the buffer
  [_i_] ibuffer            [_r_] toggle read-only mode
  [_a_] alternate          [_u_] revert buffer changes
  [_s_] switch (helm)      [_w_] save buffer
                         [_d_] diff buffer
--------------------------------------------------------------------------------
    "
    ("a" joe-alternate-buffers)
    ("b" ivy-switch-buffer)
	("d" joe-diff-buffer-with-file)
    ("k" joe-kill-this-buffer)
    ("i" ibuffer)
    ("m" ace-swap-window)
    ("r" read-only-mode)
    ("s" helm-buffers-list)
    ("u" joe-revert-buffer)
    ("w" save-buffer))

    (defhydra hydra-flycheck (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
      "
                                                                    ╭──────────┐
   Navigate          Show Errors                  Do                │ Flycheck │
╭───────────────────────────────────────────────────────────────────┴──────────╯
   ^_p_^revious     [_l_] list errors           [_t_] toggle Flycheck
      ^^↑^^         [_e_] list errors (helm)    [_c_] select checker
    ^_f_^irst       [_d_] clear all errors      [_r_] run via compile
      ^^↓^^          ^ ^                        [_h_] describe checker
    ^_n_^ext
--------------------------------------------------------------------------------
      "
      ("c" flycheck-select-checker)
      ("h" flycheck-describe-checker)
      ("d" flycheck-clear)
      ("e" helm-flycheck)
      ("f" flycheck-first-error)
      ("l" flycheck-list-errors)
      ("n" flycheck-next-error :color red)
      ("p" flycheck-previous-error :color red)
      ("r" flycheck-compile)
      ("t" flycheck-mode))

    (defhydra hydra-development (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
      "
                                                                 ╭─────────────┐
     Zeal                   Web                 Quickrun         │ Development │
╭────────────────────────────────────────────────────────────────┴─────────────╯
  [_z_] search docs   [_c_] Web Colors          [_q_] buffer
  [_d_] set docset    [_h_] HTTP header         [_v_] region
   ^ ^                [_m_] HTTP method         [_x_] shell
   ^ ^                [_r_] HTTP relation       [_p_] with arg
   ^ ^                [_s_] HTTP status code    [_k_] buffer (helm)
   ^ ^                [_g_] RESTclient          [_o_] only compile
   ^ ^                [_f_] RFC doc             [_R_] replace
  [_l_] lines of code [_F_] RFC index           [_e_] eval/print
--------------------------------------------------------------------------------
      "
      ("z" zeal-at-point)
      ("d" zeal-at-point-set-docset)
      ("c" helm-colors)
      ("g" restclient-mode)
      ("f" irfc-visit)
      ("F" irfc-index)
      ("q" quickrun)
      ("v" quickrun-region)
      ("x" quickrun-shell)
      ("p" quickrun-with-arg)
      ("o" quickrun-compile-only)
      ("R" quickrun-replace-region)
      ("e" quickrun-eval-print)
      ("k" helm-quickrun)
      ("h" http-header)
      ("m" http-method)
      ("r" http-relation)
      ("s" http-status-code)
      ("l" cloc))

  (defhydra hydra-emacs (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
      "
                                                                       ╭───────┐
   Execute       Packages         Help                     Misc        │ Emacs │
╭──────────────────────────────────────────────────────────────────────┴───────╯
  [_s_] smex       [_p_] list      [_a_] apropos (helm)    [_t_] change theme (helm)
  [_m_] smex mode  [_i_] install   [_f_] info manual       [_l_] list emacs process
  [_h_] helm M-x   [_u_] upgrade   [_k_] bindings (helm)   [_c_] init time
   ^ ^              ^ ^            [_b_] personal bindings [_o_] unbound commands
--------------------------------------------------------------------------------
      "
      ("C-h b" helm-descbinds "bindings")
      ("a" helm-apropos)
      ("b" describe-personal-keybindings)
      ("c" emacs-init-time)
      ("i" package-install)
      ("k" helm-descbinds)
      ("l" list-processes)
      ("f" info-display-manual)
      ("p" paradox-list-packages)
      ("t" helm-themes)
      ("u" paradox-upgrade-packages)
      ("m" smex-major-mode-commands)
      ("s" smex)
      ("h" helm-M-x)
      ("o" smex-show-unbound-commands))

;;   (defhydra hydra-file (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
;;       "
;;                                                                         ╭──────┐
;;      Ido               Helm                 Dired        Ztree          │ File │
;; ╭───────────────────────────────────────────────────────────────────────┴──────╯
;;   [_o_] open file   [_f_] find file      [_d_] dired    [_z_] diff dirs
;;    ^ ^              [_m_] mini
;; --------------------------------------------------------------------------------
;;       "
;;       ("o" find-file)
;;       ("f" helm-find-files)
;;       ("m" helm-mini)
;;       ("z" ztree-diff)
;;       ("d" dired))

    (defhydra hydra-file (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
      "
                                                                        ╭──────┐
  Specific Files       Specific Directories                             │ File │
╭───────────────────────────────────────────────────────────────────────┴──────╯
  [_i_] init.el          [_w_] WQ                       [_I_] re-load init.el
  [_n_] notes.org        [_l_] LTM
  [_a_] AIMS.org         [_o_] Other
  [_r_] references.org
  [_b_] References.bib
--------------------------------------------------------------------------------
      "
      ("i" (find-file "~/.emacs.d/init.el"))
	  ("n" (find-file "~/org/notes.org"))
	  ("a" (find-file "~/org/AIMS.org"))
	  ("r" (find-file "~/org/references.org"))
	  ("b" (find-file "~/Dropbox/Work/Resources/References/References.bib"))
	  ("w" (dired "~/Work/AIMS/WQ"))
	  ("l" (dired "~/Work/AIMS/LTM"))
	  ("o" (dired "~/Work/AIMS/Other"))
	  ("I" (load-file "~/.emacs.d/init.el"))
	  )


  (defhydra hydra-text (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
      "
                                                                        ╭──────┐
 Size  Toggle              Unicode                        Do            │ Text │
╭───────────────────────────────────────────────────────────────────────┴──────╯
  _k_  [_f_] fill column     [_d_] unicode character           [_a_] align with regex
  ^↑^  [_h_] hidden chars    [_e_] evil digraphs table         [_w_] remove trailing ' '
  ^ ^  [_l_] line numbers    [_s_] specific code block         [_n_] count words
  ^↓^  [_t_] trailing ' '    [_u_] unicode character (helm)    [_i_] lorem ipsum
  _j_  [_v_] font space      [_p_] character code              [_x_] comment box
  ^ ^  [_c_] comment          ^ ^                              [_q_] boxquote
  ^ ^  [_b_] multibyte chars  ^ ^                              [_m_] iedit (multiple)
  ^ ^   ^ ^                   ^ ^                              [_r_] expand region
--------------------------------------------------------------------------------
      "
      ("a" align-regexp)
      ("b" toggle-enable-multibyte-characters)
      ("c" evilnc-comment-or-uncomment-lines)
      ("d" insert-char)
      ("e" evil-ex-show-digraphs)
      ("f" fci-mode)
      ("h" whitespace-mode)
      ("i" lorem-ipsum-insert-paragraphs)
      ("k" text-scale-increase :color red)
      ("j" text-scale-decrease :color red)
      ("l" linum-mode)
      ("n" count-words)
      ("m" iedit)
      ("p" describe-char)
      ("r" er/expand-region)
      ("s" charmap)
      ("t" joe-toggle-show-trailing-whitespace)
      ("u" helm-ucs)
      ("v" variable-pitch-mode)
      ("w" whitespace-cleanup)
      ("q" hydra-boxquote/body)
      ("x" comment-box))

  (defhydra hydra-git (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
      "
                                                                         ╭─────┐
   Magit                          VC                    Timemachine      │ Git │
╭────────────────────────────────────────────────────────────────────────┴─────╯
  [_s_] status              [_d_] diffs between revisions  [_t_] timemachine
  [_B_] blame mode          [_b_] edition history
  [_l_] file log
--------------------------------------------------------------------------------
      "
      ("B" magit-blame-mode)
      ("b" vc-annotate)
      ("d" vc-diff)
      ("l" magit-file-log)
      ("s" magit-status)
      ("t" git-timemachine))

  (defhydra hydra-internet (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
      "
                                                                    ╭──────────┐
    Browse       Search             Social               Post       │ Internet │
╭───────────────────────────────────────────────────────────────────┴──────────╯
  [_w_] eww      [_g_] google          [_f_] elfeed            [_i_] imgur
  [_u_] url      [_m_] google maps     [_t_] twitter
   ^ ^           [_s_] surfraw         [_x_] stack overflow
   ^ ^           [_d_] wordnik
--------------------------------------------------------------------------------
      "
      ("f" elfeed)
      ("g" google-this)
      ("i" imgur-post)
      ("m" google-maps)
      ("d" define-word-at-point)
      ("s" helm-surfraw)
      ("t" twit)
      ("w" eww)
      ("u" browse-url-at-point)
      ("x" sx-tab-newest))

  (defhydra hydra-jump (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
      "
                                                                        ╭──────┐
  Window          Word/Char        Line         iSearch                 │ Jump │
╭───────────────────────────────────────────────────────────────────────┴──────╯
  [_w_] jump        [_j_] word         [_l_] jump     [_i_] jump
  [_d_] close       [_p_] all words    [_y_] copy
  [_z_] maximize    [_b_] subword      [_m_] move
  [_s_] swap        [_c_] char         [_v_] copy region
   ^ ^              [_a_] two chars
--------------------------------------------------------------------------------
      "
      ("w" ace-window)
      ("d" ace-delete-window)
      ("z" ace-maximize-window)
      ("s" ace-swap-window)
      ("j" avy-goto-word-1)
      ("p" avy-goto-word-0)
      ("b" avy-goto-subword-0)
      ("c" avy-goto-char)
      ("a" avy-goto-char-2)
      ("l" avy-goto-line)
      ("y" avy-copy-line)
      ("m" avy-move-line)
      ("v" avy-copy-region)
      ("i" avy-isearch))

  (defhydra hydra-spell (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
      "
                                                                       ╭───────┐
    Flyspell               Ispell                      Gtranslate      │ Spell │
╭──────────────────────────────────────────────────────────────────────┴───────╯
  [_k_] correct word       [_w_] check word            [_g_] en ⇆ es
  [_n_] next error         [_t_] toggle dictionary     [_G_] any lang
  [_f_] toggle flyspell    [_d_] change dictionary
  [_p_] toggle prog mode
--------------------------------------------------------------------------------
      "
      ("w" ispell-word)
      ("d" ispell-change-dictionary)
      ("t" joe-switch-dictionary)
      ("g" google-translate-smooth-translate)
      ("G" google-translate-query-translate)
      ("f" flyspell-mode)
      ("p" flyspell-prog-mode)
      ("k" flyspell-auto-correct-word)
      ("n" flyspell-goto-next-error))

  (defhydra hydra-lisp (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
      "
                                                                        ╭──────┐
    Elisp              Bug hunter                                       │ Lisp │
╭───────────────────────────────────────────────────────────────────────┴──────╯
  [_r_] eval region    [_f_] file
  [_s_] eval sexp      [_i_] init-file
--------------------------------------------------------------------------------
      "
      ("f" bug-hunter-file)
      ("i" bug-hunter-init-file)
      ("r" eval-region)
      ("s" eval-last-sexp))

  (defhydra hydra-narrow (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
      "
                                                                      ╭────────┐
    Narrow                                                            │ Narrow │
╭─────────────────────────────────────────────────────────────────────┴────────╯
  [_f_] narrow to defun
  [_p_] narrow to page
  [_r_] narrow to region
  [_w_] widen
--------------------------------------------------------------------------------
      "
      ("f" narrow-to-defun)
      ("p" narrow-to-page)
      ("r" narrow-to-region)
      ("w" widen))

  (defhydra hydra-pdf (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
	  "
                                                                   ╭───────────┐
    Navigation           Search                  Display           │ pdf-tools │
╭──────────────────────────────────────────────────────────────────┴───────────╯
  [_<_] arrows to move  [_s_] normal search         [_+_] zoom in
  [_p_] previous page   [_S_] Occur search (M-s o)  [_-_] zoom out
  [_n_] next page                                   [_H_] fit height (W=width; P=page)
  [_g_] go to page (M-g g)                          [_o_] outline

                                                                   ╭───────────┐
    Annotations                                                    │ pdf-tools │
╭──────────────────────────────────────────────────────────────────┴───────────╯
  [_l_] list annotations (C-c C-a l)
  [_a_] add text (icon) annotation
  [_h_] add highlight annotation (C-c C-a h)
  [_q_] add squiggly annotation (C-c C-a s)
  [_u_] add underline annotation (C-c C-a u)
--------------------------------------------------------------------------------
      "
      ("<" narrow-to-defun)
      ("p" pdf-view-previous-page)
      ("n" pdf-view-next-page)
      ("g" pdf-view-goto-page)
	  ("s" isearch-forward)
	  ("S" pdf-occur-search)
	  ("+" pdf-view-enlarge)
	  ("-" pdf-view-shrink)
	  ("H" pdf-view-fit-height-to-window)
	  ("o" pdf-outline)
	  ("l" pdf-annot-list-annotations)
	  ("a" pdf-annot-add-text-annotation)
	  ("h" pdf-annot-add-highlight-markup-annotation)
	  ("q" pdf-annot-add-squiggly-markup-annotation)
	  ("u" pdf-annot-add-underline-markup-annotation))
  
;;   (defhydra hydra-project (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
;;       "
;;                                                                   ╭────────────┐
;;   Files             Search          Buffer             Do         │ Projectile │
;; ╭─────────────────────────────────────────────────────────────────┴────────────╯
;;   [_f_] file          [_a_] ag          [_b_] switch         [_g_] magit
;;   [_l_] file dwim     [_A_] grep        [_v_] show all       [_p_] commander
;;   [_r_] recent file   [_s_] occur       [_V_] ibuffer        [_i_] info
;;   [_d_] dir           [_S_] replace     [_K_] kill all
;;   [_o_] other         [_t_] find tag
;;   [_u_] test file     [_T_] make tags
;;   [_h_] root
;;                                                                       ╭────────┐
;;   Other Window      Run             Cache              Do             │ Fixmee │
;; ╭──────────────────────────────────────────────────╯ ╭────────────────┴────────╯
;;   [_F_] file          [_U_] test        [_kc_] clear         [_x_] TODO & FIXME
;;   [_L_] dwim          [_m_] compile     [_kk_] add current   [_X_] toggle
;;   [_D_] dir           [_c_] shell       [_ks_] cleanup
;;   [_O_] other         [_C_] command     [_kd_] remove
;;   [_B_] buffer
;; --------------------------------------------------------------------------------
;;       "
;;       ("a"   projectile-ag)
;;       ("A"   projectile-grep)
;;       ("b"   projectile-switch-to-buffer)
;;       ("B"   projectile-switch-to-buffer-other-window)
;;       ("c"   projectile-run-async-shell-command-in-root)
;;       ("C"   projectile-run-command-in-root)
;;       ("d"   projectile-find-dir)
;;       ("D"   projectile-find-dir-other-window)
;;       ("f"   projectile-find-file)
;;       ("F"   projectile-find-file-other-window)
;;       ("g"   projectile-vc)
;;       ("h"   projectile-dired)
;;       ("i"   projectile-project-info)
;;       ("kc"  projectile-invalidate-cache)
;;       ("kd"  projectile-remove-known-project)
;;       ("kk"  projectile-cache-current-file)
;;       ("K"   projectile-kill-buffers)
;;       ("ks"  projectile-cleanup-known-projects)
;;       ("l"   projectile-find-file-dwim)
;;       ("L"   projectile-find-file-dwim-other-window)
;;       ("m"   projectile-compile-project)
;;       ("o"   projectile-find-other-file)
;;       ("O"   projectile-find-other-file-other-window)
;;       ("p"   projectile-commander)
;;       ("r"   projectile-recentf)
;;       ("s"   projectile-multi-occur)
;;       ("S"   projectile-replace)
;;       ("t"   projectile-find-tag)
;;       ("T"   projectile-regenerate-tags)
;;       ("u"   projectile-find-test-file)
;;       ("U"   projectile-test-project)
;;       ("v"   projectile-display-buffer)
;;       ("V"   projectile-ibuffer)
;;       ("X"   fixmee-mode)
;;       ("x"   fixmee-view-listing))

  (defhydra hydra-exit (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
      "
                                                                        ╭──────┐
   Quit                                                                 │ Exit │
╭───────────────────────────────────────────────────────────────────────┴──────╯
  [_c_] exit emacs (standalone or client)
  [_s_] shutdown the emacs daemon
--------------------------------------------------------------------------------
      "
      ("c" save-buffers-kill-terminal)
      ("s" save-buffers-kill-emacs))

  (defhydra hydra-R (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
      "
                                                                    ╭──────────┐
   Logs                        Registers                Undo        │ Register │
╭───────────────────────────────────────────────────────────────────┴──────────╯
  [_c_] commands history       [_e_] emacs registers    [_u_] undo tree
  [_o_] echo-area messages     [_r_] evil registers
  [_b_] minibuffer             [_m_] evil marks
  [_l_] messages               [_k_] kill ring
  [_d_] diff buffer with file
--------------------------------------------------------------------------------
      "
      ("c" helm-complex-command-history)
      ("d" joe-diff-buffer-with-file)
      ("e" helm-register)
      ("k" helm-show-kill-ring)
      ("a" helm-all-mark-rings)
      ("l" popwin:messages)
      ("m" evil-show-marks)
      ("o" view-echo-area-messages)
      ("r" evil-show-registers)
      ("b" helm-minibuffer-history)
      ("u" undo-tree-visualize))

  
  (defhydra hydra-register (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
      "
                                                                    ╭──────────┐
   Logs                        Registers                Undo        │ Register │
╭───────────────────────────────────────────────────────────────────┴──────────╯
  [_c_] commands history       [_e_] emacs registers    [_u_] undo tree
  [_o_] echo-area messages     [_r_] evil registers
  [_b_] minibuffer             [_m_] evil marks
  [_l_] messages               [_k_] kill ring
  [_d_] diff buffer with file
--------------------------------------------------------------------------------
      "
      ("c" helm-complex-command-history)
      ("d" joe-diff-buffer-with-file)
      ("e" helm-register)
      ("k" helm-show-kill-ring)
      ("a" helm-all-mark-rings)
      ("l" popwin:messages)
      ("m" evil-show-marks)
      ("o" view-echo-area-messages)
      ("r" evil-show-registers)
      ("b" helm-minibuffer-history)
      ("u" undo-tree-visualize))

  (defhydra hydra-search (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
      "
                                                                      ╭────────┐
   Files                             Buffer                           │ Search │
╭─────────────────────────────────────────────────────────────────────┴────────╯
  [_a_] regex search (Ag)           [_b_] by word
  [_A_] regex by filetype (Ag)      [_o_] by word (occur)
  [_h_] regex search (grep & helm)  [_w_] by word (multi)
  [_g_] regex search (grep)         [_t_] tags & titles
  [_f_] find                        [_r_] re-builder
  [_l_] locate                      [_g_] query-replace-regexp
--------------------------------------------------------------------------------
      "
      ("A" ag-files)
      ("a" ag)
      ("b" helm-swoop)
      ("f" helm-find)
      ("g" rgrep)
      ("h" helm-do-grep)
      ("l" helm-locate)
      ("o" helm-occur)
      ("t" helm-semantic-or-imenu)
      ("w" helm-multi-swoop)
	  ("r" re-builder)
	  ("g" reb-query-replace))

  (defhydra hydra-games (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
      "
                                                                       ╭───────┐
   Game                                                                │ Games │
╭──────────────────────────────────────────────────────────────────────┴───────╯
  [_p_] 2048-game      [_c_] chess (computer)
  [_b_] bubbles        [_a_] chess (internet)
  [_t_] tetris
  [_g_] gomoku
--------------------------------------------------------------------------------
      "
      ("p" 2048-game)
      ("b" bubbles-set-game-hard)
      ("c" chess)
      ("a" chess-ics)
      ("g" gomoku)
      ("t" tetris))

  (defhydra hydra-RlatexPandoc (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
      "
                                                            ╭──────────────────┐
   Create project                            Snippets       │ R, LaTeX, Pandoc │
╭───────────────────────────────────────────────────────────┴──────────────────╯
  [_s_] small markdown knitr pandoc        
  [_l_] large markdown knitr pandoc        
  [_e_] elsarticle markdown knitr pandoc
  [_k_] knitr-xelatex
  [_r_] R-xelatex
  
--------------------------------------------------------------------------------
      "
      ("s" small-markdown-knitr-pandoc)
      ("l" large-markdown-knitr-pandoc)
      ("e" elsarticle-R)
      ("k" knitr-xelatex)
      ("r" R-xelatex))

  
  (defhydra hydra-system (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
      "
                                                                      ╭────────┐
   Terminals                     System                               │ System │
╭─────────────────────────────────────────────────────────────────────┴────────╯
  [_s_] new multi-term           [_c_] shell command
  [_n_] next multi-term          [_a_] aync shell command
  [_p_] previous multi-term      [_m_] man page
  [_d_] dedicated multi-term     [_l_] list system process
  [_e_] eshell                   [_t_] top command
--------------------------------------------------------------------------------
      "
      ("a" async-shell-command)
      ("c" shell-command)
      ("e" eshell)
      ("m" helm-man-woman)
      ("l" proced)
      ("s" multi-term)
      ("n" multi-term-next)
      ("p" multi-term-previous)
      ("d" multi-term-dedicated-toggle)
      ("t" helm-top))

;;   (defhydra hydra-media (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
;;       "
;;                                                                        ╭───────┐
;;    Emms                Mpd                  Volume                     │ Media │
;; ╭──────────────────────────────────────────────────────────────────────┴───────╯
;;  [_e_] show emms      [_n_] next song          [_-_] volume down (shift number pad -)
;;  [_b_] browse         [_p_] previous song      [_+_] volume up (shift number pad +)
;;  [_f_] play file      [_c_] clear playlist
;;   ^ ^                 [_o_] show song
;;   ^ ^                 [_P_] pause
;;   ^ ^                 [_s_] stop
;;   ^ ^                 [_y_] start & sync
;; --------------------------------------------------------------------------------
;;       "
;; 	  ("e" emms)
;;       ("a" emms-start)
;;       ("x" emms-stop)
;;       ("b" emms-smart-browse)
;;       ("f" emms-play-file)
;;       ("m" emms-player-mpd-connect)
;;       ("c" emms-player-mpd-clear)
;;       ("n" emms-player-mpd-next)
;;       ("o" emms-player-mpd-show)
;;       ("P" emms-player-mpd-pause)
;;       ("p" emms-player-mpd-previous)
;;       ("s" emms-player-mpd-stop)
;;       ("y" emms-player-mpd-start)
;;       ("-" emms-volume-lower :color red)
;;       ("\+" emms-volume-raise :color red))


  (defhydra hydra-media (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
      "
                                                                       ╭───────┐
   Emms                        Volume                                  │ Media │
╭──────────────────────────────────────────────────────────────────────┴───────╯
 [_e_] show emms (M-x emms)      [_-_] volume down (shift number pad -)
 [_c_] current song (c)          [_+_] volume up (shift number pad +)                
 [_s_] stop song                 
 [_b_] browsing                  
 [_n_] next song                           
 [_p_] previous song                           
--------------------------------------------------------------------------------
      "
	  ("e" emms)
      ("a" emms-start)
      ("s" emms-stop)
      ("b" emms-smart-browse)
      ("n" emms-next)
      ("c" emms-playlist-mode-center-when-go)
      ("p" emms-previous)
      ("-" emms-volume-lower :color red)
      ("\+" emms-volume-raise :color red))

  (defhydra hydra-organization (:color blue :hint nil :idle 0.4 :inherit (hydra-common/heads))
      "
                                                                ╭──────────────┐
     Tasks            Org mode               Comms      Others  │ Organization │
╭───────────────────────────────────────────────────────────────┴──────────────╯
  [_a_] agenda      [_c_] capture             [_m_] mail      [_x_] speed type
  [_l_] agenda list [_p_] pomodoro            [_t_] contacts
  [_d_] calendar    [_s_] search headings     [_h_] add location
   ^ ^              [_g_] open location gmaps
   ^ ^              [_f_] archive subtree

                                                                ╭──────────────┐
     Time clocking    Org mode               Comms      Others  │ Organization │
╭───────────────────────────────────────────────────────────────┴──────────────╯
  [_i_] clocking in (C-c C-x C-i)
--------------------------------------------------------------------------------
      "
      ("a" org-agenda)
      ("c" org-capture)
      ("d" cfw:open-org-calendar)
      ("g" org-location-google-maps)
      ("h" org-address-google-geocode-set)
      ("l" org-agenda-list)
      ("f" org-archive-subtree)
      ("m" mu4e)
      ("p" org-pomodoro)
      ("s" helm-org-agenda-files-headings)
      ("t" org-contacts)
      ("x" speed-type-text))

   (defhydra hydra-leader ( :color blue :hint nil :idle 0.4)
       "
                                                                      ╭────────┐
   Toggle                        Do                                   │ Leader │
╭─────────────────────────────────────────────────────────────────────┴────────╯
  [_c_] comment                  [_a_] align with regex
  [_f_] fill column              [_p_] show character code
  [_h_] hidden chars             [_i_] insert unicode character (helm)
  [_e_] trailing whitespace      [_<SPC>_] remove trailing whitespaces
  [_v_] font space               [_u_] undo tree
   ^ ^                           [_j_] jump word
   ^ ^                           [_x_] comment box
   ^ ^                           [_r_] expand region
   ^ ^                           [_m_] iedit (multiple edit)
   ^ ^                           [_g_] google translate
   ^ ^                           [_s_] swiper
   ^ ^                           [_t_] helm-semantic-or-imenu
--------------------------------------------------------------------------------
      "
      ("<escape>" nil "quit")
      ("a" align-regexp)
      ("c" evilnc-comment-or-uncomment-lines)
      ("r" er/expand-region)
      ("f" fci-mode)
      ("g" google-translate-smooth-translate)
      ("h" whitespace-mode)
      ("i" helm-ucs)
      ("j" avy-goto-word-1)
      ("m" iedit-mode)
      ("n" count-words)
      ("p" describe-char)
      ("e" joe-toggle-show-trailing-whitespace)
      ("u" undo-tree-visualize)
      ("v" variable-pitch-mode)
      ("<SPC>" whitespace-cleanup)
      ("s" joe-swiper)
      ("t" helm-semantic-or-imenu)
      ("x" comment-box)))

#+end_src
* Fonts
#+begin_src emacs-lisp
(set-face-attribute 'default nil                           
  :family "DejaVu Sans Mono" :height 80)
#+end_src
* LaTeX
#+begin_src emacs-lisp
(use-package auctex
   :ensure tex)
(add-hook `tex-mode-hook 'turn-on-reftex)
(add-hook `noweb-mode-hook 'turn-on-reftex)
#+end_src
